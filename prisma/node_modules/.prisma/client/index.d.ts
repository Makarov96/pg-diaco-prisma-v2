
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Complaint
 */

export type Complaint = {
  id: number
  createdAt: Date
  updatedAt: Date
  title: string
  description: string | null
  authorization: boolean
  authorId: string | null
  anonymousAuthorId: string | null
}

/**
 * Model Anonymous
 */

export type Anonymous = {
  id: string
  createdAt: Date
  updatedAt: Date
  profile: Profile
}

/**
 * Model User
 */

export type User = {
  id: string
  createdAt: Date
  updatedAt: Date
  firstName: string | null
  secondName: string | null
  fisrtLastName: string | null
  secondLastName: string | null
  marriedName: string
  email: string | null
  profile: Profile
}

/**
 * Model Phone
 */

export type Phone = {
  id: number
  createdAt: Date
  updatedAt: Date
  phoneNumber: string | null
  phoneAddress: string | null
  mobile: string | null
  docimicilioPhone: string | null
  phoneId: string
}

/**
 * Model Gender
 */

export type Gender = {
  genderId: string
  genderType: string | null
}

/**
 * Model ConsumerType
 */

export type ConsumerType = {
  consumerId: string
  consumer: string | null
}

/**
 * Model CountryIformation
 */

export type CountryIformation = {
  id: number
  createdAt: Date
  updatedAt: Date
  nationality: string | null
  direction: string | null
  zone: string
  departament: string | null
  municipality: string | null
  nearbyHeadquarters: string | null
  countryId: string | null
}

/**
 * Model PersonalDocumentation
 */

export type PersonalDocumentation = {
  id: number
  createdAt: Date
  updatedAt: Date
  identificationDocument: string | null
  nit: string | null
  personalDocId: string
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const Profile: {
  ANONYMOUS: 'ANONYMOUS',
  USER: 'USER'
};

export type Profile = (typeof Profile)[keyof typeof Profile]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Complaints
 * const complaints = await prisma.complaint.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Complaints
   * const complaints = await prisma.complaint.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;


      /**
   * `prisma.complaint`: Exposes CRUD operations for the **Complaint** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Complaints
    * const complaints = await prisma.complaint.findMany()
    * ```
    */
  get complaint(): Prisma.ComplaintDelegate<GlobalReject>;

  /**
   * `prisma.anonymous`: Exposes CRUD operations for the **Anonymous** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Anonymous
    * const anonymous = await prisma.anonymous.findMany()
    * ```
    */
  get anonymous(): Prisma.AnonymousDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.phone`: Exposes CRUD operations for the **Phone** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Phones
    * const phones = await prisma.phone.findMany()
    * ```
    */
  get phone(): Prisma.PhoneDelegate<GlobalReject>;

  /**
   * `prisma.gender`: Exposes CRUD operations for the **Gender** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Genders
    * const genders = await prisma.gender.findMany()
    * ```
    */
  get gender(): Prisma.GenderDelegate<GlobalReject>;

  /**
   * `prisma.consumerType`: Exposes CRUD operations for the **ConsumerType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConsumerTypes
    * const consumerTypes = await prisma.consumerType.findMany()
    * ```
    */
  get consumerType(): Prisma.ConsumerTypeDelegate<GlobalReject>;

  /**
   * `prisma.countryIformation`: Exposes CRUD operations for the **CountryIformation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CountryIformations
    * const countryIformations = await prisma.countryIformation.findMany()
    * ```
    */
  get countryIformation(): Prisma.CountryIformationDelegate<GlobalReject>;

  /**
   * `prisma.personalDocumentation`: Exposes CRUD operations for the **PersonalDocumentation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PersonalDocumentations
    * const personalDocumentations = await prisma.personalDocumentation.findMany()
    * ```
    */
  get personalDocumentation(): Prisma.PersonalDocumentationDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.0.1
   * Query Engine version: 2452cc6313d52b8b9a96999ac0e974d0aedf88db
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Complaint: 'Complaint',
    Anonymous: 'Anonymous',
    User: 'User',
    Phone: 'Phone',
    Gender: 'Gender',
    ConsumerType: 'ConsumerType',
    CountryIformation: 'CountryIformation',
    PersonalDocumentation: 'PersonalDocumentation'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AnonymousCountOutputType
   */


  export type AnonymousCountOutputType = {
    complaints: number
  }

  export type AnonymousCountOutputTypeSelect = {
    complaints?: boolean
  }

  export type AnonymousCountOutputTypeGetPayload<
    S extends boolean | null | undefined | AnonymousCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? AnonymousCountOutputType
    : S extends undefined
    ? never
    : S extends AnonymousCountOutputTypeArgs
    ?'include' extends U
    ? AnonymousCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof AnonymousCountOutputType ?AnonymousCountOutputType [P]
  : 
     never
  } 
    : AnonymousCountOutputType
  : AnonymousCountOutputType




  // Custom InputTypes

  /**
   * AnonymousCountOutputType without action
   */
  export type AnonymousCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AnonymousCountOutputType
     * 
    **/
    select?: AnonymousCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    complaints: number
  }

  export type UserCountOutputTypeSelect = {
    complaints?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof UserCountOutputType ?UserCountOutputType [P]
  : 
     never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Complaint
   */


  export type AggregateComplaint = {
    _count: ComplaintCountAggregateOutputType | null
    _avg: ComplaintAvgAggregateOutputType | null
    _sum: ComplaintSumAggregateOutputType | null
    _min: ComplaintMinAggregateOutputType | null
    _max: ComplaintMaxAggregateOutputType | null
  }

  export type ComplaintAvgAggregateOutputType = {
    id: number | null
  }

  export type ComplaintSumAggregateOutputType = {
    id: number | null
  }

  export type ComplaintMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    title: string | null
    description: string | null
    authorization: boolean | null
    authorId: string | null
    anonymousAuthorId: string | null
  }

  export type ComplaintMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    title: string | null
    description: string | null
    authorization: boolean | null
    authorId: string | null
    anonymousAuthorId: string | null
  }

  export type ComplaintCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    title: number
    description: number
    authorization: number
    authorId: number
    anonymousAuthorId: number
    _all: number
  }


  export type ComplaintAvgAggregateInputType = {
    id?: true
  }

  export type ComplaintSumAggregateInputType = {
    id?: true
  }

  export type ComplaintMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    title?: true
    description?: true
    authorization?: true
    authorId?: true
    anonymousAuthorId?: true
  }

  export type ComplaintMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    title?: true
    description?: true
    authorization?: true
    authorId?: true
    anonymousAuthorId?: true
  }

  export type ComplaintCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    title?: true
    description?: true
    authorization?: true
    authorId?: true
    anonymousAuthorId?: true
    _all?: true
  }

  export type ComplaintAggregateArgs = {
    /**
     * Filter which Complaint to aggregate.
     * 
    **/
    where?: ComplaintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Complaints to fetch.
     * 
    **/
    orderBy?: Enumerable<ComplaintOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ComplaintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Complaints from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Complaints.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Complaints
    **/
    _count?: true | ComplaintCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ComplaintAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ComplaintSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComplaintMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComplaintMaxAggregateInputType
  }

  export type GetComplaintAggregateType<T extends ComplaintAggregateArgs> = {
        [P in keyof T & keyof AggregateComplaint]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComplaint[P]>
      : GetScalarType<T[P], AggregateComplaint[P]>
  }


    
    
  export type ComplaintGroupByArgs = {
    where?: ComplaintWhereInput
    orderBy?: Enumerable<ComplaintOrderByWithAggregationInput>
    by: Array<ComplaintScalarFieldEnum>
    having?: ComplaintScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComplaintCountAggregateInputType | true
    _avg?: ComplaintAvgAggregateInputType
    _sum?: ComplaintSumAggregateInputType
    _min?: ComplaintMinAggregateInputType
    _max?: ComplaintMaxAggregateInputType
  }


  export type ComplaintGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    title: string
    description: string | null
    authorization: boolean
    authorId: string | null
    anonymousAuthorId: string | null
    _count: ComplaintCountAggregateOutputType | null
    _avg: ComplaintAvgAggregateOutputType | null
    _sum: ComplaintSumAggregateOutputType | null
    _min: ComplaintMinAggregateOutputType | null
    _max: ComplaintMaxAggregateOutputType | null
  }

  type GetComplaintGroupByPayload<T extends ComplaintGroupByArgs> = Promise<
    Array<
      PickArray<ComplaintGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof ComplaintGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], ComplaintGroupByOutputType[P]> 
            : GetScalarType<T[P], ComplaintGroupByOutputType[P]>
        }
      > 
    >


  export type ComplaintSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    title?: boolean
    description?: boolean
    authorization?: boolean
    author?: boolean | UserArgs
    anonymousAuthor?: boolean | AnonymousArgs
    authorId?: boolean
    anonymousAuthorId?: boolean
  }

  export type ComplaintInclude = {
    author?: boolean | UserArgs
    anonymousAuthor?: boolean | AnonymousArgs
  }

  export type ComplaintGetPayload<
    S extends boolean | null | undefined | ComplaintArgs,
    U = keyof S
      > = S extends true
        ? Complaint
    : S extends undefined
    ? never
    : S extends ComplaintArgs | ComplaintFindManyArgs
    ?'include' extends U
    ? Complaint  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'author'
        ? UserGetPayload<S['include'][P]> | null :
        P extends 'anonymousAuthor'
        ? AnonymousGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Complaint ?Complaint [P]
  : 
          P extends 'author'
        ? UserGetPayload<S['select'][P]> | null :
        P extends 'anonymousAuthor'
        ? AnonymousGetPayload<S['select'][P]> | null : never
  } 
    : Complaint
  : Complaint


  type ComplaintCountArgs = Merge<
    Omit<ComplaintFindManyArgs, 'select' | 'include'> & {
      select?: ComplaintCountAggregateInputType | true
    }
  >

  export interface ComplaintDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Complaint that matches the filter.
     * @param {ComplaintFindUniqueArgs} args - Arguments to find a Complaint
     * @example
     * // Get one Complaint
     * const complaint = await prisma.complaint.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ComplaintFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ComplaintFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Complaint'> extends True ? CheckSelect<T, Prisma__ComplaintClient<Complaint>, Prisma__ComplaintClient<ComplaintGetPayload<T>>> : CheckSelect<T, Prisma__ComplaintClient<Complaint | null >, Prisma__ComplaintClient<ComplaintGetPayload<T> | null >>

    /**
     * Find the first Complaint that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintFindFirstArgs} args - Arguments to find a Complaint
     * @example
     * // Get one Complaint
     * const complaint = await prisma.complaint.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ComplaintFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ComplaintFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Complaint'> extends True ? CheckSelect<T, Prisma__ComplaintClient<Complaint>, Prisma__ComplaintClient<ComplaintGetPayload<T>>> : CheckSelect<T, Prisma__ComplaintClient<Complaint | null >, Prisma__ComplaintClient<ComplaintGetPayload<T> | null >>

    /**
     * Find zero or more Complaints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Complaints
     * const complaints = await prisma.complaint.findMany()
     * 
     * // Get first 10 Complaints
     * const complaints = await prisma.complaint.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const complaintWithIdOnly = await prisma.complaint.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ComplaintFindManyArgs>(
      args?: SelectSubset<T, ComplaintFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Complaint>>, PrismaPromise<Array<ComplaintGetPayload<T>>>>

    /**
     * Create a Complaint.
     * @param {ComplaintCreateArgs} args - Arguments to create a Complaint.
     * @example
     * // Create one Complaint
     * const Complaint = await prisma.complaint.create({
     *   data: {
     *     // ... data to create a Complaint
     *   }
     * })
     * 
    **/
    create<T extends ComplaintCreateArgs>(
      args: SelectSubset<T, ComplaintCreateArgs>
    ): CheckSelect<T, Prisma__ComplaintClient<Complaint>, Prisma__ComplaintClient<ComplaintGetPayload<T>>>

    /**
     * Create many Complaints.
     *     @param {ComplaintCreateManyArgs} args - Arguments to create many Complaints.
     *     @example
     *     // Create many Complaints
     *     const complaint = await prisma.complaint.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ComplaintCreateManyArgs>(
      args?: SelectSubset<T, ComplaintCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Complaint.
     * @param {ComplaintDeleteArgs} args - Arguments to delete one Complaint.
     * @example
     * // Delete one Complaint
     * const Complaint = await prisma.complaint.delete({
     *   where: {
     *     // ... filter to delete one Complaint
     *   }
     * })
     * 
    **/
    delete<T extends ComplaintDeleteArgs>(
      args: SelectSubset<T, ComplaintDeleteArgs>
    ): CheckSelect<T, Prisma__ComplaintClient<Complaint>, Prisma__ComplaintClient<ComplaintGetPayload<T>>>

    /**
     * Update one Complaint.
     * @param {ComplaintUpdateArgs} args - Arguments to update one Complaint.
     * @example
     * // Update one Complaint
     * const complaint = await prisma.complaint.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ComplaintUpdateArgs>(
      args: SelectSubset<T, ComplaintUpdateArgs>
    ): CheckSelect<T, Prisma__ComplaintClient<Complaint>, Prisma__ComplaintClient<ComplaintGetPayload<T>>>

    /**
     * Delete zero or more Complaints.
     * @param {ComplaintDeleteManyArgs} args - Arguments to filter Complaints to delete.
     * @example
     * // Delete a few Complaints
     * const { count } = await prisma.complaint.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ComplaintDeleteManyArgs>(
      args?: SelectSubset<T, ComplaintDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Complaints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Complaints
     * const complaint = await prisma.complaint.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ComplaintUpdateManyArgs>(
      args: SelectSubset<T, ComplaintUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Complaint.
     * @param {ComplaintUpsertArgs} args - Arguments to update or create a Complaint.
     * @example
     * // Update or create a Complaint
     * const complaint = await prisma.complaint.upsert({
     *   create: {
     *     // ... data to create a Complaint
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Complaint we want to update
     *   }
     * })
    **/
    upsert<T extends ComplaintUpsertArgs>(
      args: SelectSubset<T, ComplaintUpsertArgs>
    ): CheckSelect<T, Prisma__ComplaintClient<Complaint>, Prisma__ComplaintClient<ComplaintGetPayload<T>>>

    /**
     * Count the number of Complaints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintCountArgs} args - Arguments to filter Complaints to count.
     * @example
     * // Count the number of Complaints
     * const count = await prisma.complaint.count({
     *   where: {
     *     // ... the filter for the Complaints we want to count
     *   }
     * })
    **/
    count<T extends ComplaintCountArgs>(
      args?: Subset<T, ComplaintCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComplaintCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Complaint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComplaintAggregateArgs>(args: Subset<T, ComplaintAggregateArgs>): PrismaPromise<GetComplaintAggregateType<T>>

    /**
     * Group by Complaint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComplaintGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComplaintGroupByArgs['orderBy'] }
        : { orderBy?: ComplaintGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComplaintGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComplaintGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Complaint.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ComplaintClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    author<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    anonymousAuthor<T extends AnonymousArgs = {}>(args?: Subset<T, AnonymousArgs>): CheckSelect<T, Prisma__AnonymousClient<Anonymous | null >, Prisma__AnonymousClient<AnonymousGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Complaint findUnique
   */
  export type ComplaintFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Complaint
     * 
    **/
    select?: ComplaintSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ComplaintInclude | null
    /**
     * Throw an Error if a Complaint can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Complaint to fetch.
     * 
    **/
    where: ComplaintWhereUniqueInput
  }


  /**
   * Complaint findFirst
   */
  export type ComplaintFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Complaint
     * 
    **/
    select?: ComplaintSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ComplaintInclude | null
    /**
     * Throw an Error if a Complaint can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Complaint to fetch.
     * 
    **/
    where?: ComplaintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Complaints to fetch.
     * 
    **/
    orderBy?: Enumerable<ComplaintOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Complaints.
     * 
    **/
    cursor?: ComplaintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Complaints from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Complaints.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Complaints.
     * 
    **/
    distinct?: Enumerable<ComplaintScalarFieldEnum>
  }


  /**
   * Complaint findMany
   */
  export type ComplaintFindManyArgs = {
    /**
     * Select specific fields to fetch from the Complaint
     * 
    **/
    select?: ComplaintSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ComplaintInclude | null
    /**
     * Filter, which Complaints to fetch.
     * 
    **/
    where?: ComplaintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Complaints to fetch.
     * 
    **/
    orderBy?: Enumerable<ComplaintOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Complaints.
     * 
    **/
    cursor?: ComplaintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Complaints from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Complaints.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ComplaintScalarFieldEnum>
  }


  /**
   * Complaint create
   */
  export type ComplaintCreateArgs = {
    /**
     * Select specific fields to fetch from the Complaint
     * 
    **/
    select?: ComplaintSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ComplaintInclude | null
    /**
     * The data needed to create a Complaint.
     * 
    **/
    data: XOR<ComplaintCreateInput, ComplaintUncheckedCreateInput>
  }


  /**
   * Complaint createMany
   */
  export type ComplaintCreateManyArgs = {
    data: Enumerable<ComplaintCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Complaint update
   */
  export type ComplaintUpdateArgs = {
    /**
     * Select specific fields to fetch from the Complaint
     * 
    **/
    select?: ComplaintSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ComplaintInclude | null
    /**
     * The data needed to update a Complaint.
     * 
    **/
    data: XOR<ComplaintUpdateInput, ComplaintUncheckedUpdateInput>
    /**
     * Choose, which Complaint to update.
     * 
    **/
    where: ComplaintWhereUniqueInput
  }


  /**
   * Complaint updateMany
   */
  export type ComplaintUpdateManyArgs = {
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyInput>
    where?: ComplaintWhereInput
  }


  /**
   * Complaint upsert
   */
  export type ComplaintUpsertArgs = {
    /**
     * Select specific fields to fetch from the Complaint
     * 
    **/
    select?: ComplaintSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ComplaintInclude | null
    /**
     * The filter to search for the Complaint to update in case it exists.
     * 
    **/
    where: ComplaintWhereUniqueInput
    /**
     * In case the Complaint found by the `where` argument doesn't exist, create a new Complaint with this data.
     * 
    **/
    create: XOR<ComplaintCreateInput, ComplaintUncheckedCreateInput>
    /**
     * In case the Complaint was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ComplaintUpdateInput, ComplaintUncheckedUpdateInput>
  }


  /**
   * Complaint delete
   */
  export type ComplaintDeleteArgs = {
    /**
     * Select specific fields to fetch from the Complaint
     * 
    **/
    select?: ComplaintSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ComplaintInclude | null
    /**
     * Filter which Complaint to delete.
     * 
    **/
    where: ComplaintWhereUniqueInput
  }


  /**
   * Complaint deleteMany
   */
  export type ComplaintDeleteManyArgs = {
    where?: ComplaintWhereInput
  }


  /**
   * Complaint without action
   */
  export type ComplaintArgs = {
    /**
     * Select specific fields to fetch from the Complaint
     * 
    **/
    select?: ComplaintSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ComplaintInclude | null
  }



  /**
   * Model Anonymous
   */


  export type AggregateAnonymous = {
    _count: AnonymousCountAggregateOutputType | null
    _min: AnonymousMinAggregateOutputType | null
    _max: AnonymousMaxAggregateOutputType | null
  }

  export type AnonymousMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    profile: Profile | null
  }

  export type AnonymousMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    profile: Profile | null
  }

  export type AnonymousCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    profile: number
    _all: number
  }


  export type AnonymousMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    profile?: true
  }

  export type AnonymousMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    profile?: true
  }

  export type AnonymousCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    profile?: true
    _all?: true
  }

  export type AnonymousAggregateArgs = {
    /**
     * Filter which Anonymous to aggregate.
     * 
    **/
    where?: AnonymousWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anonymous to fetch.
     * 
    **/
    orderBy?: Enumerable<AnonymousOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AnonymousWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anonymous from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anonymous.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Anonymous
    **/
    _count?: true | AnonymousCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnonymousMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnonymousMaxAggregateInputType
  }

  export type GetAnonymousAggregateType<T extends AnonymousAggregateArgs> = {
        [P in keyof T & keyof AggregateAnonymous]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnonymous[P]>
      : GetScalarType<T[P], AggregateAnonymous[P]>
  }


    
    
  export type AnonymousGroupByArgs = {
    where?: AnonymousWhereInput
    orderBy?: Enumerable<AnonymousOrderByWithAggregationInput>
    by: Array<AnonymousScalarFieldEnum>
    having?: AnonymousScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnonymousCountAggregateInputType | true
    _min?: AnonymousMinAggregateInputType
    _max?: AnonymousMaxAggregateInputType
  }


  export type AnonymousGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    profile: Profile
    _count: AnonymousCountAggregateOutputType | null
    _min: AnonymousMinAggregateOutputType | null
    _max: AnonymousMaxAggregateOutputType | null
  }

  type GetAnonymousGroupByPayload<T extends AnonymousGroupByArgs> = Promise<
    Array<
      PickArray<AnonymousGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof AnonymousGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], AnonymousGroupByOutputType[P]> 
            : GetScalarType<T[P], AnonymousGroupByOutputType[P]>
        }
      > 
    >


  export type AnonymousSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profile?: boolean
    complaints?: boolean | ComplaintFindManyArgs
    _count?: boolean | AnonymousCountOutputTypeArgs
  }

  export type AnonymousInclude = {
    complaints?: boolean | ComplaintFindManyArgs
    _count?: boolean | AnonymousCountOutputTypeArgs
  }

  export type AnonymousGetPayload<
    S extends boolean | null | undefined | AnonymousArgs,
    U = keyof S
      > = S extends true
        ? Anonymous
    : S extends undefined
    ? never
    : S extends AnonymousArgs | AnonymousFindManyArgs
    ?'include' extends U
    ? Anonymous  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'complaints'
        ? Array < ComplaintGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? AnonymousCountOutputTypeGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Anonymous ?Anonymous [P]
  : 
          P extends 'complaints'
        ? Array < ComplaintGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? AnonymousCountOutputTypeGetPayload<S['select'][P]> | null : never
  } 
    : Anonymous
  : Anonymous


  type AnonymousCountArgs = Merge<
    Omit<AnonymousFindManyArgs, 'select' | 'include'> & {
      select?: AnonymousCountAggregateInputType | true
    }
  >

  export interface AnonymousDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Anonymous that matches the filter.
     * @param {AnonymousFindUniqueArgs} args - Arguments to find a Anonymous
     * @example
     * // Get one Anonymous
     * const anonymous = await prisma.anonymous.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AnonymousFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AnonymousFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Anonymous'> extends True ? CheckSelect<T, Prisma__AnonymousClient<Anonymous>, Prisma__AnonymousClient<AnonymousGetPayload<T>>> : CheckSelect<T, Prisma__AnonymousClient<Anonymous | null >, Prisma__AnonymousClient<AnonymousGetPayload<T> | null >>

    /**
     * Find the first Anonymous that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymousFindFirstArgs} args - Arguments to find a Anonymous
     * @example
     * // Get one Anonymous
     * const anonymous = await prisma.anonymous.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AnonymousFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AnonymousFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Anonymous'> extends True ? CheckSelect<T, Prisma__AnonymousClient<Anonymous>, Prisma__AnonymousClient<AnonymousGetPayload<T>>> : CheckSelect<T, Prisma__AnonymousClient<Anonymous | null >, Prisma__AnonymousClient<AnonymousGetPayload<T> | null >>

    /**
     * Find zero or more Anonymous that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymousFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Anonymous
     * const anonymous = await prisma.anonymous.findMany()
     * 
     * // Get first 10 Anonymous
     * const anonymous = await prisma.anonymous.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const anonymousWithIdOnly = await prisma.anonymous.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AnonymousFindManyArgs>(
      args?: SelectSubset<T, AnonymousFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Anonymous>>, PrismaPromise<Array<AnonymousGetPayload<T>>>>

    /**
     * Create a Anonymous.
     * @param {AnonymousCreateArgs} args - Arguments to create a Anonymous.
     * @example
     * // Create one Anonymous
     * const Anonymous = await prisma.anonymous.create({
     *   data: {
     *     // ... data to create a Anonymous
     *   }
     * })
     * 
    **/
    create<T extends AnonymousCreateArgs>(
      args: SelectSubset<T, AnonymousCreateArgs>
    ): CheckSelect<T, Prisma__AnonymousClient<Anonymous>, Prisma__AnonymousClient<AnonymousGetPayload<T>>>

    /**
     * Create many Anonymous.
     *     @param {AnonymousCreateManyArgs} args - Arguments to create many Anonymous.
     *     @example
     *     // Create many Anonymous
     *     const anonymous = await prisma.anonymous.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AnonymousCreateManyArgs>(
      args?: SelectSubset<T, AnonymousCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Anonymous.
     * @param {AnonymousDeleteArgs} args - Arguments to delete one Anonymous.
     * @example
     * // Delete one Anonymous
     * const Anonymous = await prisma.anonymous.delete({
     *   where: {
     *     // ... filter to delete one Anonymous
     *   }
     * })
     * 
    **/
    delete<T extends AnonymousDeleteArgs>(
      args: SelectSubset<T, AnonymousDeleteArgs>
    ): CheckSelect<T, Prisma__AnonymousClient<Anonymous>, Prisma__AnonymousClient<AnonymousGetPayload<T>>>

    /**
     * Update one Anonymous.
     * @param {AnonymousUpdateArgs} args - Arguments to update one Anonymous.
     * @example
     * // Update one Anonymous
     * const anonymous = await prisma.anonymous.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AnonymousUpdateArgs>(
      args: SelectSubset<T, AnonymousUpdateArgs>
    ): CheckSelect<T, Prisma__AnonymousClient<Anonymous>, Prisma__AnonymousClient<AnonymousGetPayload<T>>>

    /**
     * Delete zero or more Anonymous.
     * @param {AnonymousDeleteManyArgs} args - Arguments to filter Anonymous to delete.
     * @example
     * // Delete a few Anonymous
     * const { count } = await prisma.anonymous.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AnonymousDeleteManyArgs>(
      args?: SelectSubset<T, AnonymousDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Anonymous.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymousUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Anonymous
     * const anonymous = await prisma.anonymous.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AnonymousUpdateManyArgs>(
      args: SelectSubset<T, AnonymousUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Anonymous.
     * @param {AnonymousUpsertArgs} args - Arguments to update or create a Anonymous.
     * @example
     * // Update or create a Anonymous
     * const anonymous = await prisma.anonymous.upsert({
     *   create: {
     *     // ... data to create a Anonymous
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Anonymous we want to update
     *   }
     * })
    **/
    upsert<T extends AnonymousUpsertArgs>(
      args: SelectSubset<T, AnonymousUpsertArgs>
    ): CheckSelect<T, Prisma__AnonymousClient<Anonymous>, Prisma__AnonymousClient<AnonymousGetPayload<T>>>

    /**
     * Count the number of Anonymous.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymousCountArgs} args - Arguments to filter Anonymous to count.
     * @example
     * // Count the number of Anonymous
     * const count = await prisma.anonymous.count({
     *   where: {
     *     // ... the filter for the Anonymous we want to count
     *   }
     * })
    **/
    count<T extends AnonymousCountArgs>(
      args?: Subset<T, AnonymousCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnonymousCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Anonymous.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymousAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnonymousAggregateArgs>(args: Subset<T, AnonymousAggregateArgs>): PrismaPromise<GetAnonymousAggregateType<T>>

    /**
     * Group by Anonymous.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymousGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnonymousGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnonymousGroupByArgs['orderBy'] }
        : { orderBy?: AnonymousGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnonymousGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnonymousGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Anonymous.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AnonymousClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    complaints<T extends ComplaintFindManyArgs = {}>(args?: Subset<T, ComplaintFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Complaint>>, PrismaPromise<Array<ComplaintGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Anonymous findUnique
   */
  export type AnonymousFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Anonymous
     * 
    **/
    select?: AnonymousSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnonymousInclude | null
    /**
     * Throw an Error if a Anonymous can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Anonymous to fetch.
     * 
    **/
    where: AnonymousWhereUniqueInput
  }


  /**
   * Anonymous findFirst
   */
  export type AnonymousFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Anonymous
     * 
    **/
    select?: AnonymousSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnonymousInclude | null
    /**
     * Throw an Error if a Anonymous can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Anonymous to fetch.
     * 
    **/
    where?: AnonymousWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anonymous to fetch.
     * 
    **/
    orderBy?: Enumerable<AnonymousOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Anonymous.
     * 
    **/
    cursor?: AnonymousWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anonymous from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anonymous.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Anonymous.
     * 
    **/
    distinct?: Enumerable<AnonymousScalarFieldEnum>
  }


  /**
   * Anonymous findMany
   */
  export type AnonymousFindManyArgs = {
    /**
     * Select specific fields to fetch from the Anonymous
     * 
    **/
    select?: AnonymousSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnonymousInclude | null
    /**
     * Filter, which Anonymous to fetch.
     * 
    **/
    where?: AnonymousWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anonymous to fetch.
     * 
    **/
    orderBy?: Enumerable<AnonymousOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Anonymous.
     * 
    **/
    cursor?: AnonymousWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anonymous from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anonymous.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AnonymousScalarFieldEnum>
  }


  /**
   * Anonymous create
   */
  export type AnonymousCreateArgs = {
    /**
     * Select specific fields to fetch from the Anonymous
     * 
    **/
    select?: AnonymousSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnonymousInclude | null
    /**
     * The data needed to create a Anonymous.
     * 
    **/
    data: XOR<AnonymousCreateInput, AnonymousUncheckedCreateInput>
  }


  /**
   * Anonymous createMany
   */
  export type AnonymousCreateManyArgs = {
    data: Enumerable<AnonymousCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Anonymous update
   */
  export type AnonymousUpdateArgs = {
    /**
     * Select specific fields to fetch from the Anonymous
     * 
    **/
    select?: AnonymousSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnonymousInclude | null
    /**
     * The data needed to update a Anonymous.
     * 
    **/
    data: XOR<AnonymousUpdateInput, AnonymousUncheckedUpdateInput>
    /**
     * Choose, which Anonymous to update.
     * 
    **/
    where: AnonymousWhereUniqueInput
  }


  /**
   * Anonymous updateMany
   */
  export type AnonymousUpdateManyArgs = {
    data: XOR<AnonymousUpdateManyMutationInput, AnonymousUncheckedUpdateManyInput>
    where?: AnonymousWhereInput
  }


  /**
   * Anonymous upsert
   */
  export type AnonymousUpsertArgs = {
    /**
     * Select specific fields to fetch from the Anonymous
     * 
    **/
    select?: AnonymousSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnonymousInclude | null
    /**
     * The filter to search for the Anonymous to update in case it exists.
     * 
    **/
    where: AnonymousWhereUniqueInput
    /**
     * In case the Anonymous found by the `where` argument doesn't exist, create a new Anonymous with this data.
     * 
    **/
    create: XOR<AnonymousCreateInput, AnonymousUncheckedCreateInput>
    /**
     * In case the Anonymous was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AnonymousUpdateInput, AnonymousUncheckedUpdateInput>
  }


  /**
   * Anonymous delete
   */
  export type AnonymousDeleteArgs = {
    /**
     * Select specific fields to fetch from the Anonymous
     * 
    **/
    select?: AnonymousSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnonymousInclude | null
    /**
     * Filter which Anonymous to delete.
     * 
    **/
    where: AnonymousWhereUniqueInput
  }


  /**
   * Anonymous deleteMany
   */
  export type AnonymousDeleteManyArgs = {
    where?: AnonymousWhereInput
  }


  /**
   * Anonymous without action
   */
  export type AnonymousArgs = {
    /**
     * Select specific fields to fetch from the Anonymous
     * 
    **/
    select?: AnonymousSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnonymousInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    firstName: string | null
    secondName: string | null
    fisrtLastName: string | null
    secondLastName: string | null
    marriedName: string | null
    email: string | null
    profile: Profile | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    firstName: string | null
    secondName: string | null
    fisrtLastName: string | null
    secondLastName: string | null
    marriedName: string | null
    email: string | null
    profile: Profile | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    firstName: number
    secondName: number
    fisrtLastName: number
    secondLastName: number
    marriedName: number
    email: number
    profile: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    firstName?: true
    secondName?: true
    fisrtLastName?: true
    secondLastName?: true
    marriedName?: true
    email?: true
    profile?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    firstName?: true
    secondName?: true
    fisrtLastName?: true
    secondLastName?: true
    marriedName?: true
    email?: true
    profile?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    firstName?: true
    secondName?: true
    fisrtLastName?: true
    secondLastName?: true
    marriedName?: true
    email?: true
    profile?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }


    
    
  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    firstName: string | null
    secondName: string | null
    fisrtLastName: string | null
    secondLastName: string | null
    marriedName: string
    email: string | null
    profile: Profile
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Promise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], UserGroupByOutputType[P]> 
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      > 
    >


  export type UserSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    firstName?: boolean
    secondName?: boolean
    fisrtLastName?: boolean
    secondLastName?: boolean
    marriedName?: boolean
    email?: boolean
    countryInformation?: boolean | CountryIformationArgs
    consumerType?: boolean | ConsumerTypeArgs
    profile?: boolean
    gender?: boolean | GenderArgs
    phone?: boolean | PhoneArgs
    personalDocuments?: boolean | PersonalDocumentationArgs
    complaints?: boolean | ComplaintFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    countryInformation?: boolean | CountryIformationArgs
    consumerType?: boolean | ConsumerTypeArgs
    gender?: boolean | GenderArgs
    phone?: boolean | PhoneArgs
    personalDocuments?: boolean | PersonalDocumentationArgs
    complaints?: boolean | ComplaintFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'countryInformation'
        ? CountryIformationGetPayload<S['include'][P]> | null :
        P extends 'consumerType'
        ? ConsumerTypeGetPayload<S['include'][P]> | null :
        P extends 'gender'
        ? GenderGetPayload<S['include'][P]> | null :
        P extends 'phone'
        ? PhoneGetPayload<S['include'][P]> | null :
        P extends 'personalDocuments'
        ? PersonalDocumentationGetPayload<S['include'][P]> | null :
        P extends 'complaints'
        ? Array < ComplaintGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? UserCountOutputTypeGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'countryInformation'
        ? CountryIformationGetPayload<S['select'][P]> | null :
        P extends 'consumerType'
        ? ConsumerTypeGetPayload<S['select'][P]> | null :
        P extends 'gender'
        ? GenderGetPayload<S['select'][P]> | null :
        P extends 'phone'
        ? PhoneGetPayload<S['select'][P]> | null :
        P extends 'personalDocuments'
        ? PersonalDocumentationGetPayload<S['select'][P]> | null :
        P extends 'complaints'
        ? Array < ComplaintGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? UserCountOutputTypeGetPayload<S['select'][P]> | null : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    countryInformation<T extends CountryIformationArgs = {}>(args?: Subset<T, CountryIformationArgs>): CheckSelect<T, Prisma__CountryIformationClient<CountryIformation | null >, Prisma__CountryIformationClient<CountryIformationGetPayload<T> | null >>;

    consumerType<T extends ConsumerTypeArgs = {}>(args?: Subset<T, ConsumerTypeArgs>): CheckSelect<T, Prisma__ConsumerTypeClient<ConsumerType | null >, Prisma__ConsumerTypeClient<ConsumerTypeGetPayload<T> | null >>;

    gender<T extends GenderArgs = {}>(args?: Subset<T, GenderArgs>): CheckSelect<T, Prisma__GenderClient<Gender | null >, Prisma__GenderClient<GenderGetPayload<T> | null >>;

    phone<T extends PhoneArgs = {}>(args?: Subset<T, PhoneArgs>): CheckSelect<T, Prisma__PhoneClient<Phone | null >, Prisma__PhoneClient<PhoneGetPayload<T> | null >>;

    personalDocuments<T extends PersonalDocumentationArgs = {}>(args?: Subset<T, PersonalDocumentationArgs>): CheckSelect<T, Prisma__PersonalDocumentationClient<PersonalDocumentation | null >, Prisma__PersonalDocumentationClient<PersonalDocumentationGetPayload<T> | null >>;

    complaints<T extends ComplaintFindManyArgs = {}>(args?: Subset<T, ComplaintFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Complaint>>, PrismaPromise<Array<ComplaintGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Phone
   */


  export type AggregatePhone = {
    _count: PhoneCountAggregateOutputType | null
    _avg: PhoneAvgAggregateOutputType | null
    _sum: PhoneSumAggregateOutputType | null
    _min: PhoneMinAggregateOutputType | null
    _max: PhoneMaxAggregateOutputType | null
  }

  export type PhoneAvgAggregateOutputType = {
    id: number | null
  }

  export type PhoneSumAggregateOutputType = {
    id: number | null
  }

  export type PhoneMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    phoneNumber: string | null
    phoneAddress: string | null
    mobile: string | null
    docimicilioPhone: string | null
    phoneId: string | null
  }

  export type PhoneMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    phoneNumber: string | null
    phoneAddress: string | null
    mobile: string | null
    docimicilioPhone: string | null
    phoneId: string | null
  }

  export type PhoneCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    phoneNumber: number
    phoneAddress: number
    mobile: number
    docimicilioPhone: number
    phoneId: number
    _all: number
  }


  export type PhoneAvgAggregateInputType = {
    id?: true
  }

  export type PhoneSumAggregateInputType = {
    id?: true
  }

  export type PhoneMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    phoneNumber?: true
    phoneAddress?: true
    mobile?: true
    docimicilioPhone?: true
    phoneId?: true
  }

  export type PhoneMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    phoneNumber?: true
    phoneAddress?: true
    mobile?: true
    docimicilioPhone?: true
    phoneId?: true
  }

  export type PhoneCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    phoneNumber?: true
    phoneAddress?: true
    mobile?: true
    docimicilioPhone?: true
    phoneId?: true
    _all?: true
  }

  export type PhoneAggregateArgs = {
    /**
     * Filter which Phone to aggregate.
     * 
    **/
    where?: PhoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Phones to fetch.
     * 
    **/
    orderBy?: Enumerable<PhoneOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PhoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Phones from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Phones.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Phones
    **/
    _count?: true | PhoneCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PhoneAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PhoneSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PhoneMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PhoneMaxAggregateInputType
  }

  export type GetPhoneAggregateType<T extends PhoneAggregateArgs> = {
        [P in keyof T & keyof AggregatePhone]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePhone[P]>
      : GetScalarType<T[P], AggregatePhone[P]>
  }


    
    
  export type PhoneGroupByArgs = {
    where?: PhoneWhereInput
    orderBy?: Enumerable<PhoneOrderByWithAggregationInput>
    by: Array<PhoneScalarFieldEnum>
    having?: PhoneScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PhoneCountAggregateInputType | true
    _avg?: PhoneAvgAggregateInputType
    _sum?: PhoneSumAggregateInputType
    _min?: PhoneMinAggregateInputType
    _max?: PhoneMaxAggregateInputType
  }


  export type PhoneGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    phoneNumber: string | null
    phoneAddress: string | null
    mobile: string | null
    docimicilioPhone: string | null
    phoneId: string
    _count: PhoneCountAggregateOutputType | null
    _avg: PhoneAvgAggregateOutputType | null
    _sum: PhoneSumAggregateOutputType | null
    _min: PhoneMinAggregateOutputType | null
    _max: PhoneMaxAggregateOutputType | null
  }

  type GetPhoneGroupByPayload<T extends PhoneGroupByArgs> = Promise<
    Array<
      PickArray<PhoneGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof PhoneGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], PhoneGroupByOutputType[P]> 
            : GetScalarType<T[P], PhoneGroupByOutputType[P]>
        }
      > 
    >


  export type PhoneSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    phoneNumber?: boolean
    phoneAddress?: boolean
    mobile?: boolean
    docimicilioPhone?: boolean
    user?: boolean | UserArgs
    phoneId?: boolean
  }

  export type PhoneInclude = {
    user?: boolean | UserArgs
  }

  export type PhoneGetPayload<
    S extends boolean | null | undefined | PhoneArgs,
    U = keyof S
      > = S extends true
        ? Phone
    : S extends undefined
    ? never
    : S extends PhoneArgs | PhoneFindManyArgs
    ?'include' extends U
    ? Phone  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Phone ?Phone [P]
  : 
          P extends 'user'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : Phone
  : Phone


  type PhoneCountArgs = Merge<
    Omit<PhoneFindManyArgs, 'select' | 'include'> & {
      select?: PhoneCountAggregateInputType | true
    }
  >

  export interface PhoneDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Phone that matches the filter.
     * @param {PhoneFindUniqueArgs} args - Arguments to find a Phone
     * @example
     * // Get one Phone
     * const phone = await prisma.phone.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PhoneFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PhoneFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Phone'> extends True ? CheckSelect<T, Prisma__PhoneClient<Phone>, Prisma__PhoneClient<PhoneGetPayload<T>>> : CheckSelect<T, Prisma__PhoneClient<Phone | null >, Prisma__PhoneClient<PhoneGetPayload<T> | null >>

    /**
     * Find the first Phone that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneFindFirstArgs} args - Arguments to find a Phone
     * @example
     * // Get one Phone
     * const phone = await prisma.phone.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PhoneFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PhoneFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Phone'> extends True ? CheckSelect<T, Prisma__PhoneClient<Phone>, Prisma__PhoneClient<PhoneGetPayload<T>>> : CheckSelect<T, Prisma__PhoneClient<Phone | null >, Prisma__PhoneClient<PhoneGetPayload<T> | null >>

    /**
     * Find zero or more Phones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Phones
     * const phones = await prisma.phone.findMany()
     * 
     * // Get first 10 Phones
     * const phones = await prisma.phone.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const phoneWithIdOnly = await prisma.phone.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PhoneFindManyArgs>(
      args?: SelectSubset<T, PhoneFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Phone>>, PrismaPromise<Array<PhoneGetPayload<T>>>>

    /**
     * Create a Phone.
     * @param {PhoneCreateArgs} args - Arguments to create a Phone.
     * @example
     * // Create one Phone
     * const Phone = await prisma.phone.create({
     *   data: {
     *     // ... data to create a Phone
     *   }
     * })
     * 
    **/
    create<T extends PhoneCreateArgs>(
      args: SelectSubset<T, PhoneCreateArgs>
    ): CheckSelect<T, Prisma__PhoneClient<Phone>, Prisma__PhoneClient<PhoneGetPayload<T>>>

    /**
     * Create many Phones.
     *     @param {PhoneCreateManyArgs} args - Arguments to create many Phones.
     *     @example
     *     // Create many Phones
     *     const phone = await prisma.phone.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PhoneCreateManyArgs>(
      args?: SelectSubset<T, PhoneCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Phone.
     * @param {PhoneDeleteArgs} args - Arguments to delete one Phone.
     * @example
     * // Delete one Phone
     * const Phone = await prisma.phone.delete({
     *   where: {
     *     // ... filter to delete one Phone
     *   }
     * })
     * 
    **/
    delete<T extends PhoneDeleteArgs>(
      args: SelectSubset<T, PhoneDeleteArgs>
    ): CheckSelect<T, Prisma__PhoneClient<Phone>, Prisma__PhoneClient<PhoneGetPayload<T>>>

    /**
     * Update one Phone.
     * @param {PhoneUpdateArgs} args - Arguments to update one Phone.
     * @example
     * // Update one Phone
     * const phone = await prisma.phone.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PhoneUpdateArgs>(
      args: SelectSubset<T, PhoneUpdateArgs>
    ): CheckSelect<T, Prisma__PhoneClient<Phone>, Prisma__PhoneClient<PhoneGetPayload<T>>>

    /**
     * Delete zero or more Phones.
     * @param {PhoneDeleteManyArgs} args - Arguments to filter Phones to delete.
     * @example
     * // Delete a few Phones
     * const { count } = await prisma.phone.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PhoneDeleteManyArgs>(
      args?: SelectSubset<T, PhoneDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Phones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Phones
     * const phone = await prisma.phone.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PhoneUpdateManyArgs>(
      args: SelectSubset<T, PhoneUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Phone.
     * @param {PhoneUpsertArgs} args - Arguments to update or create a Phone.
     * @example
     * // Update or create a Phone
     * const phone = await prisma.phone.upsert({
     *   create: {
     *     // ... data to create a Phone
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Phone we want to update
     *   }
     * })
    **/
    upsert<T extends PhoneUpsertArgs>(
      args: SelectSubset<T, PhoneUpsertArgs>
    ): CheckSelect<T, Prisma__PhoneClient<Phone>, Prisma__PhoneClient<PhoneGetPayload<T>>>

    /**
     * Count the number of Phones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneCountArgs} args - Arguments to filter Phones to count.
     * @example
     * // Count the number of Phones
     * const count = await prisma.phone.count({
     *   where: {
     *     // ... the filter for the Phones we want to count
     *   }
     * })
    **/
    count<T extends PhoneCountArgs>(
      args?: Subset<T, PhoneCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PhoneCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Phone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PhoneAggregateArgs>(args: Subset<T, PhoneAggregateArgs>): PrismaPromise<GetPhoneAggregateType<T>>

    /**
     * Group by Phone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PhoneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PhoneGroupByArgs['orderBy'] }
        : { orderBy?: PhoneGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PhoneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPhoneGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Phone.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PhoneClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Phone findUnique
   */
  export type PhoneFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Phone
     * 
    **/
    select?: PhoneSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PhoneInclude | null
    /**
     * Throw an Error if a Phone can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Phone to fetch.
     * 
    **/
    where: PhoneWhereUniqueInput
  }


  /**
   * Phone findFirst
   */
  export type PhoneFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Phone
     * 
    **/
    select?: PhoneSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PhoneInclude | null
    /**
     * Throw an Error if a Phone can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Phone to fetch.
     * 
    **/
    where?: PhoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Phones to fetch.
     * 
    **/
    orderBy?: Enumerable<PhoneOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Phones.
     * 
    **/
    cursor?: PhoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Phones from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Phones.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Phones.
     * 
    **/
    distinct?: Enumerable<PhoneScalarFieldEnum>
  }


  /**
   * Phone findMany
   */
  export type PhoneFindManyArgs = {
    /**
     * Select specific fields to fetch from the Phone
     * 
    **/
    select?: PhoneSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PhoneInclude | null
    /**
     * Filter, which Phones to fetch.
     * 
    **/
    where?: PhoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Phones to fetch.
     * 
    **/
    orderBy?: Enumerable<PhoneOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Phones.
     * 
    **/
    cursor?: PhoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Phones from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Phones.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PhoneScalarFieldEnum>
  }


  /**
   * Phone create
   */
  export type PhoneCreateArgs = {
    /**
     * Select specific fields to fetch from the Phone
     * 
    **/
    select?: PhoneSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PhoneInclude | null
    /**
     * The data needed to create a Phone.
     * 
    **/
    data: XOR<PhoneCreateInput, PhoneUncheckedCreateInput>
  }


  /**
   * Phone createMany
   */
  export type PhoneCreateManyArgs = {
    data: Enumerable<PhoneCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Phone update
   */
  export type PhoneUpdateArgs = {
    /**
     * Select specific fields to fetch from the Phone
     * 
    **/
    select?: PhoneSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PhoneInclude | null
    /**
     * The data needed to update a Phone.
     * 
    **/
    data: XOR<PhoneUpdateInput, PhoneUncheckedUpdateInput>
    /**
     * Choose, which Phone to update.
     * 
    **/
    where: PhoneWhereUniqueInput
  }


  /**
   * Phone updateMany
   */
  export type PhoneUpdateManyArgs = {
    data: XOR<PhoneUpdateManyMutationInput, PhoneUncheckedUpdateManyInput>
    where?: PhoneWhereInput
  }


  /**
   * Phone upsert
   */
  export type PhoneUpsertArgs = {
    /**
     * Select specific fields to fetch from the Phone
     * 
    **/
    select?: PhoneSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PhoneInclude | null
    /**
     * The filter to search for the Phone to update in case it exists.
     * 
    **/
    where: PhoneWhereUniqueInput
    /**
     * In case the Phone found by the `where` argument doesn't exist, create a new Phone with this data.
     * 
    **/
    create: XOR<PhoneCreateInput, PhoneUncheckedCreateInput>
    /**
     * In case the Phone was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PhoneUpdateInput, PhoneUncheckedUpdateInput>
  }


  /**
   * Phone delete
   */
  export type PhoneDeleteArgs = {
    /**
     * Select specific fields to fetch from the Phone
     * 
    **/
    select?: PhoneSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PhoneInclude | null
    /**
     * Filter which Phone to delete.
     * 
    **/
    where: PhoneWhereUniqueInput
  }


  /**
   * Phone deleteMany
   */
  export type PhoneDeleteManyArgs = {
    where?: PhoneWhereInput
  }


  /**
   * Phone without action
   */
  export type PhoneArgs = {
    /**
     * Select specific fields to fetch from the Phone
     * 
    **/
    select?: PhoneSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PhoneInclude | null
  }



  /**
   * Model Gender
   */


  export type AggregateGender = {
    _count: GenderCountAggregateOutputType | null
    _min: GenderMinAggregateOutputType | null
    _max: GenderMaxAggregateOutputType | null
  }

  export type GenderMinAggregateOutputType = {
    genderId: string | null
    genderType: string | null
  }

  export type GenderMaxAggregateOutputType = {
    genderId: string | null
    genderType: string | null
  }

  export type GenderCountAggregateOutputType = {
    genderId: number
    genderType: number
    _all: number
  }


  export type GenderMinAggregateInputType = {
    genderId?: true
    genderType?: true
  }

  export type GenderMaxAggregateInputType = {
    genderId?: true
    genderType?: true
  }

  export type GenderCountAggregateInputType = {
    genderId?: true
    genderType?: true
    _all?: true
  }

  export type GenderAggregateArgs = {
    /**
     * Filter which Gender to aggregate.
     * 
    **/
    where?: GenderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genders to fetch.
     * 
    **/
    orderBy?: Enumerable<GenderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GenderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genders from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genders.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Genders
    **/
    _count?: true | GenderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GenderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GenderMaxAggregateInputType
  }

  export type GetGenderAggregateType<T extends GenderAggregateArgs> = {
        [P in keyof T & keyof AggregateGender]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGender[P]>
      : GetScalarType<T[P], AggregateGender[P]>
  }


    
    
  export type GenderGroupByArgs = {
    where?: GenderWhereInput
    orderBy?: Enumerable<GenderOrderByWithAggregationInput>
    by: Array<GenderScalarFieldEnum>
    having?: GenderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GenderCountAggregateInputType | true
    _min?: GenderMinAggregateInputType
    _max?: GenderMaxAggregateInputType
  }


  export type GenderGroupByOutputType = {
    genderId: string
    genderType: string | null
    _count: GenderCountAggregateOutputType | null
    _min: GenderMinAggregateOutputType | null
    _max: GenderMaxAggregateOutputType | null
  }

  type GetGenderGroupByPayload<T extends GenderGroupByArgs> = Promise<
    Array<
      PickArray<GenderGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof GenderGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], GenderGroupByOutputType[P]> 
            : GetScalarType<T[P], GenderGroupByOutputType[P]>
        }
      > 
    >


  export type GenderSelect = {
    user?: boolean | UserArgs
    genderId?: boolean
    genderType?: boolean
  }

  export type GenderInclude = {
    user?: boolean | UserArgs
  }

  export type GenderGetPayload<
    S extends boolean | null | undefined | GenderArgs,
    U = keyof S
      > = S extends true
        ? Gender
    : S extends undefined
    ? never
    : S extends GenderArgs | GenderFindManyArgs
    ?'include' extends U
    ? Gender  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Gender ?Gender [P]
  : 
          P extends 'user'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : Gender
  : Gender


  type GenderCountArgs = Merge<
    Omit<GenderFindManyArgs, 'select' | 'include'> & {
      select?: GenderCountAggregateInputType | true
    }
  >

  export interface GenderDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Gender that matches the filter.
     * @param {GenderFindUniqueArgs} args - Arguments to find a Gender
     * @example
     * // Get one Gender
     * const gender = await prisma.gender.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GenderFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GenderFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Gender'> extends True ? CheckSelect<T, Prisma__GenderClient<Gender>, Prisma__GenderClient<GenderGetPayload<T>>> : CheckSelect<T, Prisma__GenderClient<Gender | null >, Prisma__GenderClient<GenderGetPayload<T> | null >>

    /**
     * Find the first Gender that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenderFindFirstArgs} args - Arguments to find a Gender
     * @example
     * // Get one Gender
     * const gender = await prisma.gender.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GenderFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GenderFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Gender'> extends True ? CheckSelect<T, Prisma__GenderClient<Gender>, Prisma__GenderClient<GenderGetPayload<T>>> : CheckSelect<T, Prisma__GenderClient<Gender | null >, Prisma__GenderClient<GenderGetPayload<T> | null >>

    /**
     * Find zero or more Genders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Genders
     * const genders = await prisma.gender.findMany()
     * 
     * // Get first 10 Genders
     * const genders = await prisma.gender.findMany({ take: 10 })
     * 
     * // Only select the `genderId`
     * const genderWithGenderIdOnly = await prisma.gender.findMany({ select: { genderId: true } })
     * 
    **/
    findMany<T extends GenderFindManyArgs>(
      args?: SelectSubset<T, GenderFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Gender>>, PrismaPromise<Array<GenderGetPayload<T>>>>

    /**
     * Create a Gender.
     * @param {GenderCreateArgs} args - Arguments to create a Gender.
     * @example
     * // Create one Gender
     * const Gender = await prisma.gender.create({
     *   data: {
     *     // ... data to create a Gender
     *   }
     * })
     * 
    **/
    create<T extends GenderCreateArgs>(
      args: SelectSubset<T, GenderCreateArgs>
    ): CheckSelect<T, Prisma__GenderClient<Gender>, Prisma__GenderClient<GenderGetPayload<T>>>

    /**
     * Create many Genders.
     *     @param {GenderCreateManyArgs} args - Arguments to create many Genders.
     *     @example
     *     // Create many Genders
     *     const gender = await prisma.gender.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GenderCreateManyArgs>(
      args?: SelectSubset<T, GenderCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Gender.
     * @param {GenderDeleteArgs} args - Arguments to delete one Gender.
     * @example
     * // Delete one Gender
     * const Gender = await prisma.gender.delete({
     *   where: {
     *     // ... filter to delete one Gender
     *   }
     * })
     * 
    **/
    delete<T extends GenderDeleteArgs>(
      args: SelectSubset<T, GenderDeleteArgs>
    ): CheckSelect<T, Prisma__GenderClient<Gender>, Prisma__GenderClient<GenderGetPayload<T>>>

    /**
     * Update one Gender.
     * @param {GenderUpdateArgs} args - Arguments to update one Gender.
     * @example
     * // Update one Gender
     * const gender = await prisma.gender.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GenderUpdateArgs>(
      args: SelectSubset<T, GenderUpdateArgs>
    ): CheckSelect<T, Prisma__GenderClient<Gender>, Prisma__GenderClient<GenderGetPayload<T>>>

    /**
     * Delete zero or more Genders.
     * @param {GenderDeleteManyArgs} args - Arguments to filter Genders to delete.
     * @example
     * // Delete a few Genders
     * const { count } = await prisma.gender.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GenderDeleteManyArgs>(
      args?: SelectSubset<T, GenderDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Genders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Genders
     * const gender = await prisma.gender.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GenderUpdateManyArgs>(
      args: SelectSubset<T, GenderUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Gender.
     * @param {GenderUpsertArgs} args - Arguments to update or create a Gender.
     * @example
     * // Update or create a Gender
     * const gender = await prisma.gender.upsert({
     *   create: {
     *     // ... data to create a Gender
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Gender we want to update
     *   }
     * })
    **/
    upsert<T extends GenderUpsertArgs>(
      args: SelectSubset<T, GenderUpsertArgs>
    ): CheckSelect<T, Prisma__GenderClient<Gender>, Prisma__GenderClient<GenderGetPayload<T>>>

    /**
     * Count the number of Genders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenderCountArgs} args - Arguments to filter Genders to count.
     * @example
     * // Count the number of Genders
     * const count = await prisma.gender.count({
     *   where: {
     *     // ... the filter for the Genders we want to count
     *   }
     * })
    **/
    count<T extends GenderCountArgs>(
      args?: Subset<T, GenderCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GenderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Gender.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GenderAggregateArgs>(args: Subset<T, GenderAggregateArgs>): PrismaPromise<GetGenderAggregateType<T>>

    /**
     * Group by Gender.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GenderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GenderGroupByArgs['orderBy'] }
        : { orderBy?: GenderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GenderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGenderGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Gender.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GenderClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Gender findUnique
   */
  export type GenderFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Gender
     * 
    **/
    select?: GenderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GenderInclude | null
    /**
     * Throw an Error if a Gender can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Gender to fetch.
     * 
    **/
    where: GenderWhereUniqueInput
  }


  /**
   * Gender findFirst
   */
  export type GenderFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Gender
     * 
    **/
    select?: GenderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GenderInclude | null
    /**
     * Throw an Error if a Gender can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Gender to fetch.
     * 
    **/
    where?: GenderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genders to fetch.
     * 
    **/
    orderBy?: Enumerable<GenderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Genders.
     * 
    **/
    cursor?: GenderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genders from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genders.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Genders.
     * 
    **/
    distinct?: Enumerable<GenderScalarFieldEnum>
  }


  /**
   * Gender findMany
   */
  export type GenderFindManyArgs = {
    /**
     * Select specific fields to fetch from the Gender
     * 
    **/
    select?: GenderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GenderInclude | null
    /**
     * Filter, which Genders to fetch.
     * 
    **/
    where?: GenderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genders to fetch.
     * 
    **/
    orderBy?: Enumerable<GenderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Genders.
     * 
    **/
    cursor?: GenderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genders from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genders.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GenderScalarFieldEnum>
  }


  /**
   * Gender create
   */
  export type GenderCreateArgs = {
    /**
     * Select specific fields to fetch from the Gender
     * 
    **/
    select?: GenderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GenderInclude | null
    /**
     * The data needed to create a Gender.
     * 
    **/
    data: XOR<GenderCreateInput, GenderUncheckedCreateInput>
  }


  /**
   * Gender createMany
   */
  export type GenderCreateManyArgs = {
    data: Enumerable<GenderCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Gender update
   */
  export type GenderUpdateArgs = {
    /**
     * Select specific fields to fetch from the Gender
     * 
    **/
    select?: GenderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GenderInclude | null
    /**
     * The data needed to update a Gender.
     * 
    **/
    data: XOR<GenderUpdateInput, GenderUncheckedUpdateInput>
    /**
     * Choose, which Gender to update.
     * 
    **/
    where: GenderWhereUniqueInput
  }


  /**
   * Gender updateMany
   */
  export type GenderUpdateManyArgs = {
    data: XOR<GenderUpdateManyMutationInput, GenderUncheckedUpdateManyInput>
    where?: GenderWhereInput
  }


  /**
   * Gender upsert
   */
  export type GenderUpsertArgs = {
    /**
     * Select specific fields to fetch from the Gender
     * 
    **/
    select?: GenderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GenderInclude | null
    /**
     * The filter to search for the Gender to update in case it exists.
     * 
    **/
    where: GenderWhereUniqueInput
    /**
     * In case the Gender found by the `where` argument doesn't exist, create a new Gender with this data.
     * 
    **/
    create: XOR<GenderCreateInput, GenderUncheckedCreateInput>
    /**
     * In case the Gender was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GenderUpdateInput, GenderUncheckedUpdateInput>
  }


  /**
   * Gender delete
   */
  export type GenderDeleteArgs = {
    /**
     * Select specific fields to fetch from the Gender
     * 
    **/
    select?: GenderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GenderInclude | null
    /**
     * Filter which Gender to delete.
     * 
    **/
    where: GenderWhereUniqueInput
  }


  /**
   * Gender deleteMany
   */
  export type GenderDeleteManyArgs = {
    where?: GenderWhereInput
  }


  /**
   * Gender without action
   */
  export type GenderArgs = {
    /**
     * Select specific fields to fetch from the Gender
     * 
    **/
    select?: GenderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GenderInclude | null
  }



  /**
   * Model ConsumerType
   */


  export type AggregateConsumerType = {
    _count: ConsumerTypeCountAggregateOutputType | null
    _min: ConsumerTypeMinAggregateOutputType | null
    _max: ConsumerTypeMaxAggregateOutputType | null
  }

  export type ConsumerTypeMinAggregateOutputType = {
    consumerId: string | null
    consumer: string | null
  }

  export type ConsumerTypeMaxAggregateOutputType = {
    consumerId: string | null
    consumer: string | null
  }

  export type ConsumerTypeCountAggregateOutputType = {
    consumerId: number
    consumer: number
    _all: number
  }


  export type ConsumerTypeMinAggregateInputType = {
    consumerId?: true
    consumer?: true
  }

  export type ConsumerTypeMaxAggregateInputType = {
    consumerId?: true
    consumer?: true
  }

  export type ConsumerTypeCountAggregateInputType = {
    consumerId?: true
    consumer?: true
    _all?: true
  }

  export type ConsumerTypeAggregateArgs = {
    /**
     * Filter which ConsumerType to aggregate.
     * 
    **/
    where?: ConsumerTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsumerTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<ConsumerTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ConsumerTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsumerTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsumerTypes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ConsumerTypes
    **/
    _count?: true | ConsumerTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsumerTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsumerTypeMaxAggregateInputType
  }

  export type GetConsumerTypeAggregateType<T extends ConsumerTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateConsumerType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsumerType[P]>
      : GetScalarType<T[P], AggregateConsumerType[P]>
  }


    
    
  export type ConsumerTypeGroupByArgs = {
    where?: ConsumerTypeWhereInput
    orderBy?: Enumerable<ConsumerTypeOrderByWithAggregationInput>
    by: Array<ConsumerTypeScalarFieldEnum>
    having?: ConsumerTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsumerTypeCountAggregateInputType | true
    _min?: ConsumerTypeMinAggregateInputType
    _max?: ConsumerTypeMaxAggregateInputType
  }


  export type ConsumerTypeGroupByOutputType = {
    consumerId: string
    consumer: string | null
    _count: ConsumerTypeCountAggregateOutputType | null
    _min: ConsumerTypeMinAggregateOutputType | null
    _max: ConsumerTypeMaxAggregateOutputType | null
  }

  type GetConsumerTypeGroupByPayload<T extends ConsumerTypeGroupByArgs> = Promise<
    Array<
      PickArray<ConsumerTypeGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof ConsumerTypeGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], ConsumerTypeGroupByOutputType[P]> 
            : GetScalarType<T[P], ConsumerTypeGroupByOutputType[P]>
        }
      > 
    >


  export type ConsumerTypeSelect = {
    user?: boolean | UserArgs
    consumerId?: boolean
    consumer?: boolean
  }

  export type ConsumerTypeInclude = {
    user?: boolean | UserArgs
  }

  export type ConsumerTypeGetPayload<
    S extends boolean | null | undefined | ConsumerTypeArgs,
    U = keyof S
      > = S extends true
        ? ConsumerType
    : S extends undefined
    ? never
    : S extends ConsumerTypeArgs | ConsumerTypeFindManyArgs
    ?'include' extends U
    ? ConsumerType  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ConsumerType ?ConsumerType [P]
  : 
          P extends 'user'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : ConsumerType
  : ConsumerType


  type ConsumerTypeCountArgs = Merge<
    Omit<ConsumerTypeFindManyArgs, 'select' | 'include'> & {
      select?: ConsumerTypeCountAggregateInputType | true
    }
  >

  export interface ConsumerTypeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ConsumerType that matches the filter.
     * @param {ConsumerTypeFindUniqueArgs} args - Arguments to find a ConsumerType
     * @example
     * // Get one ConsumerType
     * const consumerType = await prisma.consumerType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ConsumerTypeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ConsumerTypeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ConsumerType'> extends True ? CheckSelect<T, Prisma__ConsumerTypeClient<ConsumerType>, Prisma__ConsumerTypeClient<ConsumerTypeGetPayload<T>>> : CheckSelect<T, Prisma__ConsumerTypeClient<ConsumerType | null >, Prisma__ConsumerTypeClient<ConsumerTypeGetPayload<T> | null >>

    /**
     * Find the first ConsumerType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumerTypeFindFirstArgs} args - Arguments to find a ConsumerType
     * @example
     * // Get one ConsumerType
     * const consumerType = await prisma.consumerType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ConsumerTypeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ConsumerTypeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ConsumerType'> extends True ? CheckSelect<T, Prisma__ConsumerTypeClient<ConsumerType>, Prisma__ConsumerTypeClient<ConsumerTypeGetPayload<T>>> : CheckSelect<T, Prisma__ConsumerTypeClient<ConsumerType | null >, Prisma__ConsumerTypeClient<ConsumerTypeGetPayload<T> | null >>

    /**
     * Find zero or more ConsumerTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumerTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ConsumerTypes
     * const consumerTypes = await prisma.consumerType.findMany()
     * 
     * // Get first 10 ConsumerTypes
     * const consumerTypes = await prisma.consumerType.findMany({ take: 10 })
     * 
     * // Only select the `consumerId`
     * const consumerTypeWithConsumerIdOnly = await prisma.consumerType.findMany({ select: { consumerId: true } })
     * 
    **/
    findMany<T extends ConsumerTypeFindManyArgs>(
      args?: SelectSubset<T, ConsumerTypeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ConsumerType>>, PrismaPromise<Array<ConsumerTypeGetPayload<T>>>>

    /**
     * Create a ConsumerType.
     * @param {ConsumerTypeCreateArgs} args - Arguments to create a ConsumerType.
     * @example
     * // Create one ConsumerType
     * const ConsumerType = await prisma.consumerType.create({
     *   data: {
     *     // ... data to create a ConsumerType
     *   }
     * })
     * 
    **/
    create<T extends ConsumerTypeCreateArgs>(
      args: SelectSubset<T, ConsumerTypeCreateArgs>
    ): CheckSelect<T, Prisma__ConsumerTypeClient<ConsumerType>, Prisma__ConsumerTypeClient<ConsumerTypeGetPayload<T>>>

    /**
     * Create many ConsumerTypes.
     *     @param {ConsumerTypeCreateManyArgs} args - Arguments to create many ConsumerTypes.
     *     @example
     *     // Create many ConsumerTypes
     *     const consumerType = await prisma.consumerType.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ConsumerTypeCreateManyArgs>(
      args?: SelectSubset<T, ConsumerTypeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ConsumerType.
     * @param {ConsumerTypeDeleteArgs} args - Arguments to delete one ConsumerType.
     * @example
     * // Delete one ConsumerType
     * const ConsumerType = await prisma.consumerType.delete({
     *   where: {
     *     // ... filter to delete one ConsumerType
     *   }
     * })
     * 
    **/
    delete<T extends ConsumerTypeDeleteArgs>(
      args: SelectSubset<T, ConsumerTypeDeleteArgs>
    ): CheckSelect<T, Prisma__ConsumerTypeClient<ConsumerType>, Prisma__ConsumerTypeClient<ConsumerTypeGetPayload<T>>>

    /**
     * Update one ConsumerType.
     * @param {ConsumerTypeUpdateArgs} args - Arguments to update one ConsumerType.
     * @example
     * // Update one ConsumerType
     * const consumerType = await prisma.consumerType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ConsumerTypeUpdateArgs>(
      args: SelectSubset<T, ConsumerTypeUpdateArgs>
    ): CheckSelect<T, Prisma__ConsumerTypeClient<ConsumerType>, Prisma__ConsumerTypeClient<ConsumerTypeGetPayload<T>>>

    /**
     * Delete zero or more ConsumerTypes.
     * @param {ConsumerTypeDeleteManyArgs} args - Arguments to filter ConsumerTypes to delete.
     * @example
     * // Delete a few ConsumerTypes
     * const { count } = await prisma.consumerType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ConsumerTypeDeleteManyArgs>(
      args?: SelectSubset<T, ConsumerTypeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConsumerTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumerTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ConsumerTypes
     * const consumerType = await prisma.consumerType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ConsumerTypeUpdateManyArgs>(
      args: SelectSubset<T, ConsumerTypeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ConsumerType.
     * @param {ConsumerTypeUpsertArgs} args - Arguments to update or create a ConsumerType.
     * @example
     * // Update or create a ConsumerType
     * const consumerType = await prisma.consumerType.upsert({
     *   create: {
     *     // ... data to create a ConsumerType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ConsumerType we want to update
     *   }
     * })
    **/
    upsert<T extends ConsumerTypeUpsertArgs>(
      args: SelectSubset<T, ConsumerTypeUpsertArgs>
    ): CheckSelect<T, Prisma__ConsumerTypeClient<ConsumerType>, Prisma__ConsumerTypeClient<ConsumerTypeGetPayload<T>>>

    /**
     * Count the number of ConsumerTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumerTypeCountArgs} args - Arguments to filter ConsumerTypes to count.
     * @example
     * // Count the number of ConsumerTypes
     * const count = await prisma.consumerType.count({
     *   where: {
     *     // ... the filter for the ConsumerTypes we want to count
     *   }
     * })
    **/
    count<T extends ConsumerTypeCountArgs>(
      args?: Subset<T, ConsumerTypeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsumerTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ConsumerType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumerTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsumerTypeAggregateArgs>(args: Subset<T, ConsumerTypeAggregateArgs>): PrismaPromise<GetConsumerTypeAggregateType<T>>

    /**
     * Group by ConsumerType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumerTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConsumerTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConsumerTypeGroupByArgs['orderBy'] }
        : { orderBy?: ConsumerTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConsumerTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsumerTypeGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ConsumerType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ConsumerTypeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ConsumerType findUnique
   */
  export type ConsumerTypeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ConsumerType
     * 
    **/
    select?: ConsumerTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ConsumerTypeInclude | null
    /**
     * Throw an Error if a ConsumerType can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ConsumerType to fetch.
     * 
    **/
    where: ConsumerTypeWhereUniqueInput
  }


  /**
   * ConsumerType findFirst
   */
  export type ConsumerTypeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ConsumerType
     * 
    **/
    select?: ConsumerTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ConsumerTypeInclude | null
    /**
     * Throw an Error if a ConsumerType can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ConsumerType to fetch.
     * 
    **/
    where?: ConsumerTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsumerTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<ConsumerTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConsumerTypes.
     * 
    **/
    cursor?: ConsumerTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsumerTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsumerTypes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConsumerTypes.
     * 
    **/
    distinct?: Enumerable<ConsumerTypeScalarFieldEnum>
  }


  /**
   * ConsumerType findMany
   */
  export type ConsumerTypeFindManyArgs = {
    /**
     * Select specific fields to fetch from the ConsumerType
     * 
    **/
    select?: ConsumerTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ConsumerTypeInclude | null
    /**
     * Filter, which ConsumerTypes to fetch.
     * 
    **/
    where?: ConsumerTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsumerTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<ConsumerTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ConsumerTypes.
     * 
    **/
    cursor?: ConsumerTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsumerTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsumerTypes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ConsumerTypeScalarFieldEnum>
  }


  /**
   * ConsumerType create
   */
  export type ConsumerTypeCreateArgs = {
    /**
     * Select specific fields to fetch from the ConsumerType
     * 
    **/
    select?: ConsumerTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ConsumerTypeInclude | null
    /**
     * The data needed to create a ConsumerType.
     * 
    **/
    data: XOR<ConsumerTypeCreateInput, ConsumerTypeUncheckedCreateInput>
  }


  /**
   * ConsumerType createMany
   */
  export type ConsumerTypeCreateManyArgs = {
    data: Enumerable<ConsumerTypeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ConsumerType update
   */
  export type ConsumerTypeUpdateArgs = {
    /**
     * Select specific fields to fetch from the ConsumerType
     * 
    **/
    select?: ConsumerTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ConsumerTypeInclude | null
    /**
     * The data needed to update a ConsumerType.
     * 
    **/
    data: XOR<ConsumerTypeUpdateInput, ConsumerTypeUncheckedUpdateInput>
    /**
     * Choose, which ConsumerType to update.
     * 
    **/
    where: ConsumerTypeWhereUniqueInput
  }


  /**
   * ConsumerType updateMany
   */
  export type ConsumerTypeUpdateManyArgs = {
    data: XOR<ConsumerTypeUpdateManyMutationInput, ConsumerTypeUncheckedUpdateManyInput>
    where?: ConsumerTypeWhereInput
  }


  /**
   * ConsumerType upsert
   */
  export type ConsumerTypeUpsertArgs = {
    /**
     * Select specific fields to fetch from the ConsumerType
     * 
    **/
    select?: ConsumerTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ConsumerTypeInclude | null
    /**
     * The filter to search for the ConsumerType to update in case it exists.
     * 
    **/
    where: ConsumerTypeWhereUniqueInput
    /**
     * In case the ConsumerType found by the `where` argument doesn't exist, create a new ConsumerType with this data.
     * 
    **/
    create: XOR<ConsumerTypeCreateInput, ConsumerTypeUncheckedCreateInput>
    /**
     * In case the ConsumerType was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ConsumerTypeUpdateInput, ConsumerTypeUncheckedUpdateInput>
  }


  /**
   * ConsumerType delete
   */
  export type ConsumerTypeDeleteArgs = {
    /**
     * Select specific fields to fetch from the ConsumerType
     * 
    **/
    select?: ConsumerTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ConsumerTypeInclude | null
    /**
     * Filter which ConsumerType to delete.
     * 
    **/
    where: ConsumerTypeWhereUniqueInput
  }


  /**
   * ConsumerType deleteMany
   */
  export type ConsumerTypeDeleteManyArgs = {
    where?: ConsumerTypeWhereInput
  }


  /**
   * ConsumerType without action
   */
  export type ConsumerTypeArgs = {
    /**
     * Select specific fields to fetch from the ConsumerType
     * 
    **/
    select?: ConsumerTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ConsumerTypeInclude | null
  }



  /**
   * Model CountryIformation
   */


  export type AggregateCountryIformation = {
    _count: CountryIformationCountAggregateOutputType | null
    _avg: CountryIformationAvgAggregateOutputType | null
    _sum: CountryIformationSumAggregateOutputType | null
    _min: CountryIformationMinAggregateOutputType | null
    _max: CountryIformationMaxAggregateOutputType | null
  }

  export type CountryIformationAvgAggregateOutputType = {
    id: number | null
  }

  export type CountryIformationSumAggregateOutputType = {
    id: number | null
  }

  export type CountryIformationMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    nationality: string | null
    direction: string | null
    zone: string | null
    departament: string | null
    municipality: string | null
    nearbyHeadquarters: string | null
    countryId: string | null
  }

  export type CountryIformationMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    nationality: string | null
    direction: string | null
    zone: string | null
    departament: string | null
    municipality: string | null
    nearbyHeadquarters: string | null
    countryId: string | null
  }

  export type CountryIformationCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    nationality: number
    direction: number
    zone: number
    departament: number
    municipality: number
    nearbyHeadquarters: number
    countryId: number
    _all: number
  }


  export type CountryIformationAvgAggregateInputType = {
    id?: true
  }

  export type CountryIformationSumAggregateInputType = {
    id?: true
  }

  export type CountryIformationMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    nationality?: true
    direction?: true
    zone?: true
    departament?: true
    municipality?: true
    nearbyHeadquarters?: true
    countryId?: true
  }

  export type CountryIformationMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    nationality?: true
    direction?: true
    zone?: true
    departament?: true
    municipality?: true
    nearbyHeadquarters?: true
    countryId?: true
  }

  export type CountryIformationCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    nationality?: true
    direction?: true
    zone?: true
    departament?: true
    municipality?: true
    nearbyHeadquarters?: true
    countryId?: true
    _all?: true
  }

  export type CountryIformationAggregateArgs = {
    /**
     * Filter which CountryIformation to aggregate.
     * 
    **/
    where?: CountryIformationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CountryIformations to fetch.
     * 
    **/
    orderBy?: Enumerable<CountryIformationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CountryIformationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CountryIformations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CountryIformations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CountryIformations
    **/
    _count?: true | CountryIformationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CountryIformationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CountryIformationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CountryIformationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CountryIformationMaxAggregateInputType
  }

  export type GetCountryIformationAggregateType<T extends CountryIformationAggregateArgs> = {
        [P in keyof T & keyof AggregateCountryIformation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCountryIformation[P]>
      : GetScalarType<T[P], AggregateCountryIformation[P]>
  }


    
    
  export type CountryIformationGroupByArgs = {
    where?: CountryIformationWhereInput
    orderBy?: Enumerable<CountryIformationOrderByWithAggregationInput>
    by: Array<CountryIformationScalarFieldEnum>
    having?: CountryIformationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CountryIformationCountAggregateInputType | true
    _avg?: CountryIformationAvgAggregateInputType
    _sum?: CountryIformationSumAggregateInputType
    _min?: CountryIformationMinAggregateInputType
    _max?: CountryIformationMaxAggregateInputType
  }


  export type CountryIformationGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    nationality: string | null
    direction: string | null
    zone: string
    departament: string | null
    municipality: string | null
    nearbyHeadquarters: string | null
    countryId: string | null
    _count: CountryIformationCountAggregateOutputType | null
    _avg: CountryIformationAvgAggregateOutputType | null
    _sum: CountryIformationSumAggregateOutputType | null
    _min: CountryIformationMinAggregateOutputType | null
    _max: CountryIformationMaxAggregateOutputType | null
  }

  type GetCountryIformationGroupByPayload<T extends CountryIformationGroupByArgs> = Promise<
    Array<
      PickArray<CountryIformationGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof CountryIformationGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], CountryIformationGroupByOutputType[P]> 
            : GetScalarType<T[P], CountryIformationGroupByOutputType[P]>
        }
      > 
    >


  export type CountryIformationSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    nationality?: boolean
    direction?: boolean
    zone?: boolean
    departament?: boolean
    municipality?: boolean
    nearbyHeadquarters?: boolean
    user?: boolean | UserArgs
    countryId?: boolean
  }

  export type CountryIformationInclude = {
    user?: boolean | UserArgs
  }

  export type CountryIformationGetPayload<
    S extends boolean | null | undefined | CountryIformationArgs,
    U = keyof S
      > = S extends true
        ? CountryIformation
    : S extends undefined
    ? never
    : S extends CountryIformationArgs | CountryIformationFindManyArgs
    ?'include' extends U
    ? CountryIformation  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? UserGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof CountryIformation ?CountryIformation [P]
  : 
          P extends 'user'
        ? UserGetPayload<S['select'][P]> | null : never
  } 
    : CountryIformation
  : CountryIformation


  type CountryIformationCountArgs = Merge<
    Omit<CountryIformationFindManyArgs, 'select' | 'include'> & {
      select?: CountryIformationCountAggregateInputType | true
    }
  >

  export interface CountryIformationDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one CountryIformation that matches the filter.
     * @param {CountryIformationFindUniqueArgs} args - Arguments to find a CountryIformation
     * @example
     * // Get one CountryIformation
     * const countryIformation = await prisma.countryIformation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CountryIformationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CountryIformationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CountryIformation'> extends True ? CheckSelect<T, Prisma__CountryIformationClient<CountryIformation>, Prisma__CountryIformationClient<CountryIformationGetPayload<T>>> : CheckSelect<T, Prisma__CountryIformationClient<CountryIformation | null >, Prisma__CountryIformationClient<CountryIformationGetPayload<T> | null >>

    /**
     * Find the first CountryIformation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryIformationFindFirstArgs} args - Arguments to find a CountryIformation
     * @example
     * // Get one CountryIformation
     * const countryIformation = await prisma.countryIformation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CountryIformationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CountryIformationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CountryIformation'> extends True ? CheckSelect<T, Prisma__CountryIformationClient<CountryIformation>, Prisma__CountryIformationClient<CountryIformationGetPayload<T>>> : CheckSelect<T, Prisma__CountryIformationClient<CountryIformation | null >, Prisma__CountryIformationClient<CountryIformationGetPayload<T> | null >>

    /**
     * Find zero or more CountryIformations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryIformationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CountryIformations
     * const countryIformations = await prisma.countryIformation.findMany()
     * 
     * // Get first 10 CountryIformations
     * const countryIformations = await prisma.countryIformation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const countryIformationWithIdOnly = await prisma.countryIformation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CountryIformationFindManyArgs>(
      args?: SelectSubset<T, CountryIformationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<CountryIformation>>, PrismaPromise<Array<CountryIformationGetPayload<T>>>>

    /**
     * Create a CountryIformation.
     * @param {CountryIformationCreateArgs} args - Arguments to create a CountryIformation.
     * @example
     * // Create one CountryIformation
     * const CountryIformation = await prisma.countryIformation.create({
     *   data: {
     *     // ... data to create a CountryIformation
     *   }
     * })
     * 
    **/
    create<T extends CountryIformationCreateArgs>(
      args: SelectSubset<T, CountryIformationCreateArgs>
    ): CheckSelect<T, Prisma__CountryIformationClient<CountryIformation>, Prisma__CountryIformationClient<CountryIformationGetPayload<T>>>

    /**
     * Create many CountryIformations.
     *     @param {CountryIformationCreateManyArgs} args - Arguments to create many CountryIformations.
     *     @example
     *     // Create many CountryIformations
     *     const countryIformation = await prisma.countryIformation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CountryIformationCreateManyArgs>(
      args?: SelectSubset<T, CountryIformationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a CountryIformation.
     * @param {CountryIformationDeleteArgs} args - Arguments to delete one CountryIformation.
     * @example
     * // Delete one CountryIformation
     * const CountryIformation = await prisma.countryIformation.delete({
     *   where: {
     *     // ... filter to delete one CountryIformation
     *   }
     * })
     * 
    **/
    delete<T extends CountryIformationDeleteArgs>(
      args: SelectSubset<T, CountryIformationDeleteArgs>
    ): CheckSelect<T, Prisma__CountryIformationClient<CountryIformation>, Prisma__CountryIformationClient<CountryIformationGetPayload<T>>>

    /**
     * Update one CountryIformation.
     * @param {CountryIformationUpdateArgs} args - Arguments to update one CountryIformation.
     * @example
     * // Update one CountryIformation
     * const countryIformation = await prisma.countryIformation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CountryIformationUpdateArgs>(
      args: SelectSubset<T, CountryIformationUpdateArgs>
    ): CheckSelect<T, Prisma__CountryIformationClient<CountryIformation>, Prisma__CountryIformationClient<CountryIformationGetPayload<T>>>

    /**
     * Delete zero or more CountryIformations.
     * @param {CountryIformationDeleteManyArgs} args - Arguments to filter CountryIformations to delete.
     * @example
     * // Delete a few CountryIformations
     * const { count } = await prisma.countryIformation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CountryIformationDeleteManyArgs>(
      args?: SelectSubset<T, CountryIformationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more CountryIformations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryIformationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CountryIformations
     * const countryIformation = await prisma.countryIformation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CountryIformationUpdateManyArgs>(
      args: SelectSubset<T, CountryIformationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one CountryIformation.
     * @param {CountryIformationUpsertArgs} args - Arguments to update or create a CountryIformation.
     * @example
     * // Update or create a CountryIformation
     * const countryIformation = await prisma.countryIformation.upsert({
     *   create: {
     *     // ... data to create a CountryIformation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CountryIformation we want to update
     *   }
     * })
    **/
    upsert<T extends CountryIformationUpsertArgs>(
      args: SelectSubset<T, CountryIformationUpsertArgs>
    ): CheckSelect<T, Prisma__CountryIformationClient<CountryIformation>, Prisma__CountryIformationClient<CountryIformationGetPayload<T>>>

    /**
     * Count the number of CountryIformations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryIformationCountArgs} args - Arguments to filter CountryIformations to count.
     * @example
     * // Count the number of CountryIformations
     * const count = await prisma.countryIformation.count({
     *   where: {
     *     // ... the filter for the CountryIformations we want to count
     *   }
     * })
    **/
    count<T extends CountryIformationCountArgs>(
      args?: Subset<T, CountryIformationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CountryIformationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CountryIformation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryIformationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CountryIformationAggregateArgs>(args: Subset<T, CountryIformationAggregateArgs>): PrismaPromise<GetCountryIformationAggregateType<T>>

    /**
     * Group by CountryIformation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryIformationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CountryIformationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CountryIformationGroupByArgs['orderBy'] }
        : { orderBy?: CountryIformationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CountryIformationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCountryIformationGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for CountryIformation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CountryIformationClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * CountryIformation findUnique
   */
  export type CountryIformationFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the CountryIformation
     * 
    **/
    select?: CountryIformationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CountryIformationInclude | null
    /**
     * Throw an Error if a CountryIformation can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which CountryIformation to fetch.
     * 
    **/
    where: CountryIformationWhereUniqueInput
  }


  /**
   * CountryIformation findFirst
   */
  export type CountryIformationFindFirstArgs = {
    /**
     * Select specific fields to fetch from the CountryIformation
     * 
    **/
    select?: CountryIformationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CountryIformationInclude | null
    /**
     * Throw an Error if a CountryIformation can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which CountryIformation to fetch.
     * 
    **/
    where?: CountryIformationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CountryIformations to fetch.
     * 
    **/
    orderBy?: Enumerable<CountryIformationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CountryIformations.
     * 
    **/
    cursor?: CountryIformationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CountryIformations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CountryIformations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CountryIformations.
     * 
    **/
    distinct?: Enumerable<CountryIformationScalarFieldEnum>
  }


  /**
   * CountryIformation findMany
   */
  export type CountryIformationFindManyArgs = {
    /**
     * Select specific fields to fetch from the CountryIformation
     * 
    **/
    select?: CountryIformationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CountryIformationInclude | null
    /**
     * Filter, which CountryIformations to fetch.
     * 
    **/
    where?: CountryIformationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CountryIformations to fetch.
     * 
    **/
    orderBy?: Enumerable<CountryIformationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CountryIformations.
     * 
    **/
    cursor?: CountryIformationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CountryIformations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CountryIformations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CountryIformationScalarFieldEnum>
  }


  /**
   * CountryIformation create
   */
  export type CountryIformationCreateArgs = {
    /**
     * Select specific fields to fetch from the CountryIformation
     * 
    **/
    select?: CountryIformationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CountryIformationInclude | null
    /**
     * The data needed to create a CountryIformation.
     * 
    **/
    data: XOR<CountryIformationCreateInput, CountryIformationUncheckedCreateInput>
  }


  /**
   * CountryIformation createMany
   */
  export type CountryIformationCreateManyArgs = {
    data: Enumerable<CountryIformationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CountryIformation update
   */
  export type CountryIformationUpdateArgs = {
    /**
     * Select specific fields to fetch from the CountryIformation
     * 
    **/
    select?: CountryIformationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CountryIformationInclude | null
    /**
     * The data needed to update a CountryIformation.
     * 
    **/
    data: XOR<CountryIformationUpdateInput, CountryIformationUncheckedUpdateInput>
    /**
     * Choose, which CountryIformation to update.
     * 
    **/
    where: CountryIformationWhereUniqueInput
  }


  /**
   * CountryIformation updateMany
   */
  export type CountryIformationUpdateManyArgs = {
    data: XOR<CountryIformationUpdateManyMutationInput, CountryIformationUncheckedUpdateManyInput>
    where?: CountryIformationWhereInput
  }


  /**
   * CountryIformation upsert
   */
  export type CountryIformationUpsertArgs = {
    /**
     * Select specific fields to fetch from the CountryIformation
     * 
    **/
    select?: CountryIformationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CountryIformationInclude | null
    /**
     * The filter to search for the CountryIformation to update in case it exists.
     * 
    **/
    where: CountryIformationWhereUniqueInput
    /**
     * In case the CountryIformation found by the `where` argument doesn't exist, create a new CountryIformation with this data.
     * 
    **/
    create: XOR<CountryIformationCreateInput, CountryIformationUncheckedCreateInput>
    /**
     * In case the CountryIformation was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CountryIformationUpdateInput, CountryIformationUncheckedUpdateInput>
  }


  /**
   * CountryIformation delete
   */
  export type CountryIformationDeleteArgs = {
    /**
     * Select specific fields to fetch from the CountryIformation
     * 
    **/
    select?: CountryIformationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CountryIformationInclude | null
    /**
     * Filter which CountryIformation to delete.
     * 
    **/
    where: CountryIformationWhereUniqueInput
  }


  /**
   * CountryIformation deleteMany
   */
  export type CountryIformationDeleteManyArgs = {
    where?: CountryIformationWhereInput
  }


  /**
   * CountryIformation without action
   */
  export type CountryIformationArgs = {
    /**
     * Select specific fields to fetch from the CountryIformation
     * 
    **/
    select?: CountryIformationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CountryIformationInclude | null
  }



  /**
   * Model PersonalDocumentation
   */


  export type AggregatePersonalDocumentation = {
    _count: PersonalDocumentationCountAggregateOutputType | null
    _avg: PersonalDocumentationAvgAggregateOutputType | null
    _sum: PersonalDocumentationSumAggregateOutputType | null
    _min: PersonalDocumentationMinAggregateOutputType | null
    _max: PersonalDocumentationMaxAggregateOutputType | null
  }

  export type PersonalDocumentationAvgAggregateOutputType = {
    id: number | null
  }

  export type PersonalDocumentationSumAggregateOutputType = {
    id: number | null
  }

  export type PersonalDocumentationMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    identificationDocument: string | null
    nit: string | null
    personalDocId: string | null
  }

  export type PersonalDocumentationMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    identificationDocument: string | null
    nit: string | null
    personalDocId: string | null
  }

  export type PersonalDocumentationCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    identificationDocument: number
    nit: number
    personalDocId: number
    _all: number
  }


  export type PersonalDocumentationAvgAggregateInputType = {
    id?: true
  }

  export type PersonalDocumentationSumAggregateInputType = {
    id?: true
  }

  export type PersonalDocumentationMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    identificationDocument?: true
    nit?: true
    personalDocId?: true
  }

  export type PersonalDocumentationMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    identificationDocument?: true
    nit?: true
    personalDocId?: true
  }

  export type PersonalDocumentationCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    identificationDocument?: true
    nit?: true
    personalDocId?: true
    _all?: true
  }

  export type PersonalDocumentationAggregateArgs = {
    /**
     * Filter which PersonalDocumentation to aggregate.
     * 
    **/
    where?: PersonalDocumentationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonalDocumentations to fetch.
     * 
    **/
    orderBy?: Enumerable<PersonalDocumentationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PersonalDocumentationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonalDocumentations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonalDocumentations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PersonalDocumentations
    **/
    _count?: true | PersonalDocumentationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PersonalDocumentationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PersonalDocumentationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonalDocumentationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonalDocumentationMaxAggregateInputType
  }

  export type GetPersonalDocumentationAggregateType<T extends PersonalDocumentationAggregateArgs> = {
        [P in keyof T & keyof AggregatePersonalDocumentation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePersonalDocumentation[P]>
      : GetScalarType<T[P], AggregatePersonalDocumentation[P]>
  }


    
    
  export type PersonalDocumentationGroupByArgs = {
    where?: PersonalDocumentationWhereInput
    orderBy?: Enumerable<PersonalDocumentationOrderByWithAggregationInput>
    by: Array<PersonalDocumentationScalarFieldEnum>
    having?: PersonalDocumentationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonalDocumentationCountAggregateInputType | true
    _avg?: PersonalDocumentationAvgAggregateInputType
    _sum?: PersonalDocumentationSumAggregateInputType
    _min?: PersonalDocumentationMinAggregateInputType
    _max?: PersonalDocumentationMaxAggregateInputType
  }


  export type PersonalDocumentationGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    identificationDocument: string | null
    nit: string | null
    personalDocId: string
    _count: PersonalDocumentationCountAggregateOutputType | null
    _avg: PersonalDocumentationAvgAggregateOutputType | null
    _sum: PersonalDocumentationSumAggregateOutputType | null
    _min: PersonalDocumentationMinAggregateOutputType | null
    _max: PersonalDocumentationMaxAggregateOutputType | null
  }

  type GetPersonalDocumentationGroupByPayload<T extends PersonalDocumentationGroupByArgs> = Promise<
    Array<
      PickArray<PersonalDocumentationGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof PersonalDocumentationGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], PersonalDocumentationGroupByOutputType[P]> 
            : GetScalarType<T[P], PersonalDocumentationGroupByOutputType[P]>
        }
      > 
    >


  export type PersonalDocumentationSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    identificationDocument?: boolean
    nit?: boolean
    user?: boolean | UserArgs
    personalDocId?: boolean
  }

  export type PersonalDocumentationInclude = {
    user?: boolean | UserArgs
  }

  export type PersonalDocumentationGetPayload<
    S extends boolean | null | undefined | PersonalDocumentationArgs,
    U = keyof S
      > = S extends true
        ? PersonalDocumentation
    : S extends undefined
    ? never
    : S extends PersonalDocumentationArgs | PersonalDocumentationFindManyArgs
    ?'include' extends U
    ? PersonalDocumentation  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof PersonalDocumentation ?PersonalDocumentation [P]
  : 
          P extends 'user'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : PersonalDocumentation
  : PersonalDocumentation


  type PersonalDocumentationCountArgs = Merge<
    Omit<PersonalDocumentationFindManyArgs, 'select' | 'include'> & {
      select?: PersonalDocumentationCountAggregateInputType | true
    }
  >

  export interface PersonalDocumentationDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one PersonalDocumentation that matches the filter.
     * @param {PersonalDocumentationFindUniqueArgs} args - Arguments to find a PersonalDocumentation
     * @example
     * // Get one PersonalDocumentation
     * const personalDocumentation = await prisma.personalDocumentation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PersonalDocumentationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PersonalDocumentationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PersonalDocumentation'> extends True ? CheckSelect<T, Prisma__PersonalDocumentationClient<PersonalDocumentation>, Prisma__PersonalDocumentationClient<PersonalDocumentationGetPayload<T>>> : CheckSelect<T, Prisma__PersonalDocumentationClient<PersonalDocumentation | null >, Prisma__PersonalDocumentationClient<PersonalDocumentationGetPayload<T> | null >>

    /**
     * Find the first PersonalDocumentation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalDocumentationFindFirstArgs} args - Arguments to find a PersonalDocumentation
     * @example
     * // Get one PersonalDocumentation
     * const personalDocumentation = await prisma.personalDocumentation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PersonalDocumentationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PersonalDocumentationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PersonalDocumentation'> extends True ? CheckSelect<T, Prisma__PersonalDocumentationClient<PersonalDocumentation>, Prisma__PersonalDocumentationClient<PersonalDocumentationGetPayload<T>>> : CheckSelect<T, Prisma__PersonalDocumentationClient<PersonalDocumentation | null >, Prisma__PersonalDocumentationClient<PersonalDocumentationGetPayload<T> | null >>

    /**
     * Find zero or more PersonalDocumentations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalDocumentationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PersonalDocumentations
     * const personalDocumentations = await prisma.personalDocumentation.findMany()
     * 
     * // Get first 10 PersonalDocumentations
     * const personalDocumentations = await prisma.personalDocumentation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const personalDocumentationWithIdOnly = await prisma.personalDocumentation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PersonalDocumentationFindManyArgs>(
      args?: SelectSubset<T, PersonalDocumentationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<PersonalDocumentation>>, PrismaPromise<Array<PersonalDocumentationGetPayload<T>>>>

    /**
     * Create a PersonalDocumentation.
     * @param {PersonalDocumentationCreateArgs} args - Arguments to create a PersonalDocumentation.
     * @example
     * // Create one PersonalDocumentation
     * const PersonalDocumentation = await prisma.personalDocumentation.create({
     *   data: {
     *     // ... data to create a PersonalDocumentation
     *   }
     * })
     * 
    **/
    create<T extends PersonalDocumentationCreateArgs>(
      args: SelectSubset<T, PersonalDocumentationCreateArgs>
    ): CheckSelect<T, Prisma__PersonalDocumentationClient<PersonalDocumentation>, Prisma__PersonalDocumentationClient<PersonalDocumentationGetPayload<T>>>

    /**
     * Create many PersonalDocumentations.
     *     @param {PersonalDocumentationCreateManyArgs} args - Arguments to create many PersonalDocumentations.
     *     @example
     *     // Create many PersonalDocumentations
     *     const personalDocumentation = await prisma.personalDocumentation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PersonalDocumentationCreateManyArgs>(
      args?: SelectSubset<T, PersonalDocumentationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a PersonalDocumentation.
     * @param {PersonalDocumentationDeleteArgs} args - Arguments to delete one PersonalDocumentation.
     * @example
     * // Delete one PersonalDocumentation
     * const PersonalDocumentation = await prisma.personalDocumentation.delete({
     *   where: {
     *     // ... filter to delete one PersonalDocumentation
     *   }
     * })
     * 
    **/
    delete<T extends PersonalDocumentationDeleteArgs>(
      args: SelectSubset<T, PersonalDocumentationDeleteArgs>
    ): CheckSelect<T, Prisma__PersonalDocumentationClient<PersonalDocumentation>, Prisma__PersonalDocumentationClient<PersonalDocumentationGetPayload<T>>>

    /**
     * Update one PersonalDocumentation.
     * @param {PersonalDocumentationUpdateArgs} args - Arguments to update one PersonalDocumentation.
     * @example
     * // Update one PersonalDocumentation
     * const personalDocumentation = await prisma.personalDocumentation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PersonalDocumentationUpdateArgs>(
      args: SelectSubset<T, PersonalDocumentationUpdateArgs>
    ): CheckSelect<T, Prisma__PersonalDocumentationClient<PersonalDocumentation>, Prisma__PersonalDocumentationClient<PersonalDocumentationGetPayload<T>>>

    /**
     * Delete zero or more PersonalDocumentations.
     * @param {PersonalDocumentationDeleteManyArgs} args - Arguments to filter PersonalDocumentations to delete.
     * @example
     * // Delete a few PersonalDocumentations
     * const { count } = await prisma.personalDocumentation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PersonalDocumentationDeleteManyArgs>(
      args?: SelectSubset<T, PersonalDocumentationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more PersonalDocumentations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalDocumentationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PersonalDocumentations
     * const personalDocumentation = await prisma.personalDocumentation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PersonalDocumentationUpdateManyArgs>(
      args: SelectSubset<T, PersonalDocumentationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one PersonalDocumentation.
     * @param {PersonalDocumentationUpsertArgs} args - Arguments to update or create a PersonalDocumentation.
     * @example
     * // Update or create a PersonalDocumentation
     * const personalDocumentation = await prisma.personalDocumentation.upsert({
     *   create: {
     *     // ... data to create a PersonalDocumentation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PersonalDocumentation we want to update
     *   }
     * })
    **/
    upsert<T extends PersonalDocumentationUpsertArgs>(
      args: SelectSubset<T, PersonalDocumentationUpsertArgs>
    ): CheckSelect<T, Prisma__PersonalDocumentationClient<PersonalDocumentation>, Prisma__PersonalDocumentationClient<PersonalDocumentationGetPayload<T>>>

    /**
     * Count the number of PersonalDocumentations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalDocumentationCountArgs} args - Arguments to filter PersonalDocumentations to count.
     * @example
     * // Count the number of PersonalDocumentations
     * const count = await prisma.personalDocumentation.count({
     *   where: {
     *     // ... the filter for the PersonalDocumentations we want to count
     *   }
     * })
    **/
    count<T extends PersonalDocumentationCountArgs>(
      args?: Subset<T, PersonalDocumentationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonalDocumentationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PersonalDocumentation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalDocumentationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonalDocumentationAggregateArgs>(args: Subset<T, PersonalDocumentationAggregateArgs>): PrismaPromise<GetPersonalDocumentationAggregateType<T>>

    /**
     * Group by PersonalDocumentation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalDocumentationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PersonalDocumentationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PersonalDocumentationGroupByArgs['orderBy'] }
        : { orderBy?: PersonalDocumentationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PersonalDocumentationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonalDocumentationGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for PersonalDocumentation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PersonalDocumentationClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * PersonalDocumentation findUnique
   */
  export type PersonalDocumentationFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the PersonalDocumentation
     * 
    **/
    select?: PersonalDocumentationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PersonalDocumentationInclude | null
    /**
     * Throw an Error if a PersonalDocumentation can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which PersonalDocumentation to fetch.
     * 
    **/
    where: PersonalDocumentationWhereUniqueInput
  }


  /**
   * PersonalDocumentation findFirst
   */
  export type PersonalDocumentationFindFirstArgs = {
    /**
     * Select specific fields to fetch from the PersonalDocumentation
     * 
    **/
    select?: PersonalDocumentationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PersonalDocumentationInclude | null
    /**
     * Throw an Error if a PersonalDocumentation can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which PersonalDocumentation to fetch.
     * 
    **/
    where?: PersonalDocumentationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonalDocumentations to fetch.
     * 
    **/
    orderBy?: Enumerable<PersonalDocumentationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PersonalDocumentations.
     * 
    **/
    cursor?: PersonalDocumentationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonalDocumentations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonalDocumentations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PersonalDocumentations.
     * 
    **/
    distinct?: Enumerable<PersonalDocumentationScalarFieldEnum>
  }


  /**
   * PersonalDocumentation findMany
   */
  export type PersonalDocumentationFindManyArgs = {
    /**
     * Select specific fields to fetch from the PersonalDocumentation
     * 
    **/
    select?: PersonalDocumentationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PersonalDocumentationInclude | null
    /**
     * Filter, which PersonalDocumentations to fetch.
     * 
    **/
    where?: PersonalDocumentationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonalDocumentations to fetch.
     * 
    **/
    orderBy?: Enumerable<PersonalDocumentationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PersonalDocumentations.
     * 
    **/
    cursor?: PersonalDocumentationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonalDocumentations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonalDocumentations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PersonalDocumentationScalarFieldEnum>
  }


  /**
   * PersonalDocumentation create
   */
  export type PersonalDocumentationCreateArgs = {
    /**
     * Select specific fields to fetch from the PersonalDocumentation
     * 
    **/
    select?: PersonalDocumentationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PersonalDocumentationInclude | null
    /**
     * The data needed to create a PersonalDocumentation.
     * 
    **/
    data: XOR<PersonalDocumentationCreateInput, PersonalDocumentationUncheckedCreateInput>
  }


  /**
   * PersonalDocumentation createMany
   */
  export type PersonalDocumentationCreateManyArgs = {
    data: Enumerable<PersonalDocumentationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PersonalDocumentation update
   */
  export type PersonalDocumentationUpdateArgs = {
    /**
     * Select specific fields to fetch from the PersonalDocumentation
     * 
    **/
    select?: PersonalDocumentationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PersonalDocumentationInclude | null
    /**
     * The data needed to update a PersonalDocumentation.
     * 
    **/
    data: XOR<PersonalDocumentationUpdateInput, PersonalDocumentationUncheckedUpdateInput>
    /**
     * Choose, which PersonalDocumentation to update.
     * 
    **/
    where: PersonalDocumentationWhereUniqueInput
  }


  /**
   * PersonalDocumentation updateMany
   */
  export type PersonalDocumentationUpdateManyArgs = {
    data: XOR<PersonalDocumentationUpdateManyMutationInput, PersonalDocumentationUncheckedUpdateManyInput>
    where?: PersonalDocumentationWhereInput
  }


  /**
   * PersonalDocumentation upsert
   */
  export type PersonalDocumentationUpsertArgs = {
    /**
     * Select specific fields to fetch from the PersonalDocumentation
     * 
    **/
    select?: PersonalDocumentationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PersonalDocumentationInclude | null
    /**
     * The filter to search for the PersonalDocumentation to update in case it exists.
     * 
    **/
    where: PersonalDocumentationWhereUniqueInput
    /**
     * In case the PersonalDocumentation found by the `where` argument doesn't exist, create a new PersonalDocumentation with this data.
     * 
    **/
    create: XOR<PersonalDocumentationCreateInput, PersonalDocumentationUncheckedCreateInput>
    /**
     * In case the PersonalDocumentation was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PersonalDocumentationUpdateInput, PersonalDocumentationUncheckedUpdateInput>
  }


  /**
   * PersonalDocumentation delete
   */
  export type PersonalDocumentationDeleteArgs = {
    /**
     * Select specific fields to fetch from the PersonalDocumentation
     * 
    **/
    select?: PersonalDocumentationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PersonalDocumentationInclude | null
    /**
     * Filter which PersonalDocumentation to delete.
     * 
    **/
    where: PersonalDocumentationWhereUniqueInput
  }


  /**
   * PersonalDocumentation deleteMany
   */
  export type PersonalDocumentationDeleteManyArgs = {
    where?: PersonalDocumentationWhereInput
  }


  /**
   * PersonalDocumentation without action
   */
  export type PersonalDocumentationArgs = {
    /**
     * Select specific fields to fetch from the PersonalDocumentation
     * 
    **/
    select?: PersonalDocumentationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PersonalDocumentationInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ComplaintScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    title: 'title',
    description: 'description',
    authorization: 'authorization',
    authorId: 'authorId',
    anonymousAuthorId: 'anonymousAuthorId'
  };

  export type ComplaintScalarFieldEnum = (typeof ComplaintScalarFieldEnum)[keyof typeof ComplaintScalarFieldEnum]


  export const AnonymousScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    profile: 'profile'
  };

  export type AnonymousScalarFieldEnum = (typeof AnonymousScalarFieldEnum)[keyof typeof AnonymousScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    firstName: 'firstName',
    secondName: 'secondName',
    fisrtLastName: 'fisrtLastName',
    secondLastName: 'secondLastName',
    marriedName: 'marriedName',
    email: 'email',
    profile: 'profile'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PhoneScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    phoneNumber: 'phoneNumber',
    phoneAddress: 'phoneAddress',
    mobile: 'mobile',
    docimicilioPhone: 'docimicilioPhone',
    phoneId: 'phoneId'
  };

  export type PhoneScalarFieldEnum = (typeof PhoneScalarFieldEnum)[keyof typeof PhoneScalarFieldEnum]


  export const GenderScalarFieldEnum: {
    genderId: 'genderId',
    genderType: 'genderType'
  };

  export type GenderScalarFieldEnum = (typeof GenderScalarFieldEnum)[keyof typeof GenderScalarFieldEnum]


  export const ConsumerTypeScalarFieldEnum: {
    consumerId: 'consumerId',
    consumer: 'consumer'
  };

  export type ConsumerTypeScalarFieldEnum = (typeof ConsumerTypeScalarFieldEnum)[keyof typeof ConsumerTypeScalarFieldEnum]


  export const CountryIformationScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    nationality: 'nationality',
    direction: 'direction',
    zone: 'zone',
    departament: 'departament',
    municipality: 'municipality',
    nearbyHeadquarters: 'nearbyHeadquarters',
    countryId: 'countryId'
  };

  export type CountryIformationScalarFieldEnum = (typeof CountryIformationScalarFieldEnum)[keyof typeof CountryIformationScalarFieldEnum]


  export const PersonalDocumentationScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    identificationDocument: 'identificationDocument',
    nit: 'nit',
    personalDocId: 'personalDocId'
  };

  export type PersonalDocumentationScalarFieldEnum = (typeof PersonalDocumentationScalarFieldEnum)[keyof typeof PersonalDocumentationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type ComplaintWhereInput = {
    AND?: Enumerable<ComplaintWhereInput>
    OR?: Enumerable<ComplaintWhereInput>
    NOT?: Enumerable<ComplaintWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    title?: StringFilter | string
    description?: StringNullableFilter | string | null
    authorization?: BoolFilter | boolean
    author?: XOR<UserRelationFilter, UserWhereInput> | null
    anonymousAuthor?: XOR<AnonymousRelationFilter, AnonymousWhereInput> | null
    authorId?: StringNullableFilter | string | null
    anonymousAuthorId?: StringNullableFilter | string | null
  }

  export type ComplaintOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    authorization?: SortOrder
    author?: UserOrderByWithRelationInput
    anonymousAuthor?: AnonymousOrderByWithRelationInput
    authorId?: SortOrder
    anonymousAuthorId?: SortOrder
  }

  export type ComplaintWhereUniqueInput = {
    id?: number
  }

  export type ComplaintOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    authorization?: SortOrder
    authorId?: SortOrder
    anonymousAuthorId?: SortOrder
    _count?: ComplaintCountOrderByAggregateInput
    _avg?: ComplaintAvgOrderByAggregateInput
    _max?: ComplaintMaxOrderByAggregateInput
    _min?: ComplaintMinOrderByAggregateInput
    _sum?: ComplaintSumOrderByAggregateInput
  }

  export type ComplaintScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ComplaintScalarWhereWithAggregatesInput>
    OR?: Enumerable<ComplaintScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ComplaintScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    title?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    authorization?: BoolWithAggregatesFilter | boolean
    authorId?: StringNullableWithAggregatesFilter | string | null
    anonymousAuthorId?: StringNullableWithAggregatesFilter | string | null
  }

  export type AnonymousWhereInput = {
    AND?: Enumerable<AnonymousWhereInput>
    OR?: Enumerable<AnonymousWhereInput>
    NOT?: Enumerable<AnonymousWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    profile?: EnumProfileFilter | Profile
    complaints?: ComplaintListRelationFilter
  }

  export type AnonymousOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    profile?: SortOrder
    complaints?: ComplaintOrderByRelationAggregateInput
  }

  export type AnonymousWhereUniqueInput = {
    id?: string
  }

  export type AnonymousOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    profile?: SortOrder
    _count?: AnonymousCountOrderByAggregateInput
    _max?: AnonymousMaxOrderByAggregateInput
    _min?: AnonymousMinOrderByAggregateInput
  }

  export type AnonymousScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AnonymousScalarWhereWithAggregatesInput>
    OR?: Enumerable<AnonymousScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AnonymousScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    profile?: EnumProfileWithAggregatesFilter | Profile
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    firstName?: StringNullableFilter | string | null
    secondName?: StringNullableFilter | string | null
    fisrtLastName?: StringNullableFilter | string | null
    secondLastName?: StringNullableFilter | string | null
    marriedName?: StringFilter | string
    email?: StringNullableFilter | string | null
    countryInformation?: XOR<CountryIformationRelationFilter, CountryIformationWhereInput> | null
    consumerType?: XOR<ConsumerTypeRelationFilter, ConsumerTypeWhereInput> | null
    profile?: EnumProfileFilter | Profile
    gender?: XOR<GenderRelationFilter, GenderWhereInput> | null
    phone?: XOR<PhoneRelationFilter, PhoneWhereInput> | null
    personalDocuments?: XOR<PersonalDocumentationRelationFilter, PersonalDocumentationWhereInput> | null
    complaints?: ComplaintListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    secondName?: SortOrder
    fisrtLastName?: SortOrder
    secondLastName?: SortOrder
    marriedName?: SortOrder
    email?: SortOrder
    countryInformation?: CountryIformationOrderByWithRelationInput
    consumerType?: ConsumerTypeOrderByWithRelationInput
    profile?: SortOrder
    gender?: GenderOrderByWithRelationInput
    phone?: PhoneOrderByWithRelationInput
    personalDocuments?: PersonalDocumentationOrderByWithRelationInput
    complaints?: ComplaintOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    secondName?: SortOrder
    fisrtLastName?: SortOrder
    secondLastName?: SortOrder
    marriedName?: SortOrder
    email?: SortOrder
    profile?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    firstName?: StringNullableWithAggregatesFilter | string | null
    secondName?: StringNullableWithAggregatesFilter | string | null
    fisrtLastName?: StringNullableWithAggregatesFilter | string | null
    secondLastName?: StringNullableWithAggregatesFilter | string | null
    marriedName?: StringWithAggregatesFilter | string
    email?: StringNullableWithAggregatesFilter | string | null
    profile?: EnumProfileWithAggregatesFilter | Profile
  }

  export type PhoneWhereInput = {
    AND?: Enumerable<PhoneWhereInput>
    OR?: Enumerable<PhoneWhereInput>
    NOT?: Enumerable<PhoneWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    phoneNumber?: StringNullableFilter | string | null
    phoneAddress?: StringNullableFilter | string | null
    mobile?: StringNullableFilter | string | null
    docimicilioPhone?: StringNullableFilter | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    phoneId?: StringFilter | string
  }

  export type PhoneOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    phoneNumber?: SortOrder
    phoneAddress?: SortOrder
    mobile?: SortOrder
    docimicilioPhone?: SortOrder
    user?: UserOrderByWithRelationInput
    phoneId?: SortOrder
  }

  export type PhoneWhereUniqueInput = {
    id?: number
    phoneId?: string
  }

  export type PhoneOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    phoneNumber?: SortOrder
    phoneAddress?: SortOrder
    mobile?: SortOrder
    docimicilioPhone?: SortOrder
    phoneId?: SortOrder
    _count?: PhoneCountOrderByAggregateInput
    _avg?: PhoneAvgOrderByAggregateInput
    _max?: PhoneMaxOrderByAggregateInput
    _min?: PhoneMinOrderByAggregateInput
    _sum?: PhoneSumOrderByAggregateInput
  }

  export type PhoneScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PhoneScalarWhereWithAggregatesInput>
    OR?: Enumerable<PhoneScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PhoneScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    phoneNumber?: StringNullableWithAggregatesFilter | string | null
    phoneAddress?: StringNullableWithAggregatesFilter | string | null
    mobile?: StringNullableWithAggregatesFilter | string | null
    docimicilioPhone?: StringNullableWithAggregatesFilter | string | null
    phoneId?: StringWithAggregatesFilter | string
  }

  export type GenderWhereInput = {
    AND?: Enumerable<GenderWhereInput>
    OR?: Enumerable<GenderWhereInput>
    NOT?: Enumerable<GenderWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    genderId?: StringFilter | string
    genderType?: StringNullableFilter | string | null
  }

  export type GenderOrderByWithRelationInput = {
    user?: UserOrderByWithRelationInput
    genderId?: SortOrder
    genderType?: SortOrder
  }

  export type GenderWhereUniqueInput = {
    genderId?: string
  }

  export type GenderOrderByWithAggregationInput = {
    genderId?: SortOrder
    genderType?: SortOrder
    _count?: GenderCountOrderByAggregateInput
    _max?: GenderMaxOrderByAggregateInput
    _min?: GenderMinOrderByAggregateInput
  }

  export type GenderScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GenderScalarWhereWithAggregatesInput>
    OR?: Enumerable<GenderScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GenderScalarWhereWithAggregatesInput>
    genderId?: StringWithAggregatesFilter | string
    genderType?: StringNullableWithAggregatesFilter | string | null
  }

  export type ConsumerTypeWhereInput = {
    AND?: Enumerable<ConsumerTypeWhereInput>
    OR?: Enumerable<ConsumerTypeWhereInput>
    NOT?: Enumerable<ConsumerTypeWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    consumerId?: StringFilter | string
    consumer?: StringNullableFilter | string | null
  }

  export type ConsumerTypeOrderByWithRelationInput = {
    user?: UserOrderByWithRelationInput
    consumerId?: SortOrder
    consumer?: SortOrder
  }

  export type ConsumerTypeWhereUniqueInput = {
    consumerId?: string
  }

  export type ConsumerTypeOrderByWithAggregationInput = {
    consumerId?: SortOrder
    consumer?: SortOrder
    _count?: ConsumerTypeCountOrderByAggregateInput
    _max?: ConsumerTypeMaxOrderByAggregateInput
    _min?: ConsumerTypeMinOrderByAggregateInput
  }

  export type ConsumerTypeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ConsumerTypeScalarWhereWithAggregatesInput>
    OR?: Enumerable<ConsumerTypeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ConsumerTypeScalarWhereWithAggregatesInput>
    consumerId?: StringWithAggregatesFilter | string
    consumer?: StringNullableWithAggregatesFilter | string | null
  }

  export type CountryIformationWhereInput = {
    AND?: Enumerable<CountryIformationWhereInput>
    OR?: Enumerable<CountryIformationWhereInput>
    NOT?: Enumerable<CountryIformationWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    nationality?: StringNullableFilter | string | null
    direction?: StringNullableFilter | string | null
    zone?: StringFilter | string
    departament?: StringNullableFilter | string | null
    municipality?: StringNullableFilter | string | null
    nearbyHeadquarters?: StringNullableFilter | string | null
    user?: XOR<UserRelationFilter, UserWhereInput> | null
    countryId?: StringNullableFilter | string | null
  }

  export type CountryIformationOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nationality?: SortOrder
    direction?: SortOrder
    zone?: SortOrder
    departament?: SortOrder
    municipality?: SortOrder
    nearbyHeadquarters?: SortOrder
    user?: UserOrderByWithRelationInput
    countryId?: SortOrder
  }

  export type CountryIformationWhereUniqueInput = {
    id?: number
    countryId?: string
  }

  export type CountryIformationOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nationality?: SortOrder
    direction?: SortOrder
    zone?: SortOrder
    departament?: SortOrder
    municipality?: SortOrder
    nearbyHeadquarters?: SortOrder
    countryId?: SortOrder
    _count?: CountryIformationCountOrderByAggregateInput
    _avg?: CountryIformationAvgOrderByAggregateInput
    _max?: CountryIformationMaxOrderByAggregateInput
    _min?: CountryIformationMinOrderByAggregateInput
    _sum?: CountryIformationSumOrderByAggregateInput
  }

  export type CountryIformationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CountryIformationScalarWhereWithAggregatesInput>
    OR?: Enumerable<CountryIformationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CountryIformationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    nationality?: StringNullableWithAggregatesFilter | string | null
    direction?: StringNullableWithAggregatesFilter | string | null
    zone?: StringWithAggregatesFilter | string
    departament?: StringNullableWithAggregatesFilter | string | null
    municipality?: StringNullableWithAggregatesFilter | string | null
    nearbyHeadquarters?: StringNullableWithAggregatesFilter | string | null
    countryId?: StringNullableWithAggregatesFilter | string | null
  }

  export type PersonalDocumentationWhereInput = {
    AND?: Enumerable<PersonalDocumentationWhereInput>
    OR?: Enumerable<PersonalDocumentationWhereInput>
    NOT?: Enumerable<PersonalDocumentationWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    identificationDocument?: StringNullableFilter | string | null
    nit?: StringNullableFilter | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    personalDocId?: StringFilter | string
  }

  export type PersonalDocumentationOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    identificationDocument?: SortOrder
    nit?: SortOrder
    user?: UserOrderByWithRelationInput
    personalDocId?: SortOrder
  }

  export type PersonalDocumentationWhereUniqueInput = {
    id?: number
    personalDocId?: string
  }

  export type PersonalDocumentationOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    identificationDocument?: SortOrder
    nit?: SortOrder
    personalDocId?: SortOrder
    _count?: PersonalDocumentationCountOrderByAggregateInput
    _avg?: PersonalDocumentationAvgOrderByAggregateInput
    _max?: PersonalDocumentationMaxOrderByAggregateInput
    _min?: PersonalDocumentationMinOrderByAggregateInput
    _sum?: PersonalDocumentationSumOrderByAggregateInput
  }

  export type PersonalDocumentationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PersonalDocumentationScalarWhereWithAggregatesInput>
    OR?: Enumerable<PersonalDocumentationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PersonalDocumentationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    identificationDocument?: StringNullableWithAggregatesFilter | string | null
    nit?: StringNullableWithAggregatesFilter | string | null
    personalDocId?: StringWithAggregatesFilter | string
  }

  export type ComplaintCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    description?: string | null
    authorization?: boolean
    author?: UserCreateNestedOneWithoutComplaintsInput
    anonymousAuthor?: AnonymousCreateNestedOneWithoutComplaintsInput
  }

  export type ComplaintUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    description?: string | null
    authorization?: boolean
    authorId?: string | null
    anonymousAuthorId?: string | null
  }

  export type ComplaintUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    authorization?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneWithoutComplaintsInput
    anonymousAuthor?: AnonymousUpdateOneWithoutComplaintsInput
  }

  export type ComplaintUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    authorization?: BoolFieldUpdateOperationsInput | boolean
    authorId?: NullableStringFieldUpdateOperationsInput | string | null
    anonymousAuthorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComplaintCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    description?: string | null
    authorization?: boolean
    authorId?: string | null
    anonymousAuthorId?: string | null
  }

  export type ComplaintUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    authorization?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ComplaintUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    authorization?: BoolFieldUpdateOperationsInput | boolean
    authorId?: NullableStringFieldUpdateOperationsInput | string | null
    anonymousAuthorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AnonymousCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: Profile
    complaints?: ComplaintCreateNestedManyWithoutAnonymousAuthorInput
  }

  export type AnonymousUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: Profile
    complaints?: ComplaintUncheckedCreateNestedManyWithoutAnonymousAuthorInput
  }

  export type AnonymousUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: EnumProfileFieldUpdateOperationsInput | Profile
    complaints?: ComplaintUpdateManyWithoutAnonymousAuthorInput
  }

  export type AnonymousUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: EnumProfileFieldUpdateOperationsInput | Profile
    complaints?: ComplaintUncheckedUpdateManyWithoutAnonymousAuthorInput
  }

  export type AnonymousCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: Profile
  }

  export type AnonymousUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: EnumProfileFieldUpdateOperationsInput | Profile
  }

  export type AnonymousUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: EnumProfileFieldUpdateOperationsInput | Profile
  }

  export type UserCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    secondName?: string | null
    fisrtLastName?: string | null
    secondLastName?: string | null
    marriedName: string
    email?: string | null
    profile?: Profile
    countryInformation?: CountryIformationCreateNestedOneWithoutUserInput
    consumerType?: ConsumerTypeCreateNestedOneWithoutUserInput
    gender?: GenderCreateNestedOneWithoutUserInput
    phone?: PhoneCreateNestedOneWithoutUserInput
    personalDocuments?: PersonalDocumentationCreateNestedOneWithoutUserInput
    complaints?: ComplaintCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    secondName?: string | null
    fisrtLastName?: string | null
    secondLastName?: string | null
    marriedName: string
    email?: string | null
    profile?: Profile
    countryInformation?: CountryIformationUncheckedCreateNestedOneWithoutUserInput
    consumerType?: ConsumerTypeUncheckedCreateNestedOneWithoutUserInput
    gender?: GenderUncheckedCreateNestedOneWithoutUserInput
    phone?: PhoneUncheckedCreateNestedOneWithoutUserInput
    personalDocuments?: PersonalDocumentationUncheckedCreateNestedOneWithoutUserInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    secondName?: NullableStringFieldUpdateOperationsInput | string | null
    fisrtLastName?: NullableStringFieldUpdateOperationsInput | string | null
    secondLastName?: NullableStringFieldUpdateOperationsInput | string | null
    marriedName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: EnumProfileFieldUpdateOperationsInput | Profile
    countryInformation?: CountryIformationUpdateOneWithoutUserInput
    consumerType?: ConsumerTypeUpdateOneWithoutUserInput
    gender?: GenderUpdateOneWithoutUserInput
    phone?: PhoneUpdateOneWithoutUserInput
    personalDocuments?: PersonalDocumentationUpdateOneWithoutUserInput
    complaints?: ComplaintUpdateManyWithoutAuthorInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    secondName?: NullableStringFieldUpdateOperationsInput | string | null
    fisrtLastName?: NullableStringFieldUpdateOperationsInput | string | null
    secondLastName?: NullableStringFieldUpdateOperationsInput | string | null
    marriedName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: EnumProfileFieldUpdateOperationsInput | Profile
    countryInformation?: CountryIformationUncheckedUpdateOneWithoutUserInput
    consumerType?: ConsumerTypeUncheckedUpdateOneWithoutUserInput
    gender?: GenderUncheckedUpdateOneWithoutUserInput
    phone?: PhoneUncheckedUpdateOneWithoutUserInput
    personalDocuments?: PersonalDocumentationUncheckedUpdateOneWithoutUserInput
    complaints?: ComplaintUncheckedUpdateManyWithoutAuthorInput
  }

  export type UserCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    secondName?: string | null
    fisrtLastName?: string | null
    secondLastName?: string | null
    marriedName: string
    email?: string | null
    profile?: Profile
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    secondName?: NullableStringFieldUpdateOperationsInput | string | null
    fisrtLastName?: NullableStringFieldUpdateOperationsInput | string | null
    secondLastName?: NullableStringFieldUpdateOperationsInput | string | null
    marriedName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: EnumProfileFieldUpdateOperationsInput | Profile
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    secondName?: NullableStringFieldUpdateOperationsInput | string | null
    fisrtLastName?: NullableStringFieldUpdateOperationsInput | string | null
    secondLastName?: NullableStringFieldUpdateOperationsInput | string | null
    marriedName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: EnumProfileFieldUpdateOperationsInput | Profile
  }

  export type PhoneCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    phoneNumber?: string | null
    phoneAddress?: string | null
    mobile?: string | null
    docimicilioPhone?: string | null
    user: UserCreateNestedOneWithoutPhoneInput
  }

  export type PhoneUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    phoneNumber?: string | null
    phoneAddress?: string | null
    mobile?: string | null
    docimicilioPhone?: string | null
    phoneId: string
  }

  export type PhoneUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneAddress?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    docimicilioPhone?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPhoneInput
  }

  export type PhoneUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneAddress?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    docimicilioPhone?: NullableStringFieldUpdateOperationsInput | string | null
    phoneId?: StringFieldUpdateOperationsInput | string
  }

  export type PhoneCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    phoneNumber?: string | null
    phoneAddress?: string | null
    mobile?: string | null
    docimicilioPhone?: string | null
    phoneId: string
  }

  export type PhoneUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneAddress?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    docimicilioPhone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PhoneUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneAddress?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    docimicilioPhone?: NullableStringFieldUpdateOperationsInput | string | null
    phoneId?: StringFieldUpdateOperationsInput | string
  }

  export type GenderCreateInput = {
    genderType?: string | null
    user?: UserCreateNestedOneWithoutGenderInput
  }

  export type GenderUncheckedCreateInput = {
    genderId?: string
    genderType?: string | null
  }

  export type GenderUpdateInput = {
    genderType?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutGenderInput
  }

  export type GenderUncheckedUpdateInput = {
    genderId?: StringFieldUpdateOperationsInput | string
    genderType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GenderCreateManyInput = {
    genderId?: string
    genderType?: string | null
  }

  export type GenderUpdateManyMutationInput = {
    genderType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GenderUncheckedUpdateManyInput = {
    genderId?: StringFieldUpdateOperationsInput | string
    genderType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ConsumerTypeCreateInput = {
    consumer?: string | null
    user?: UserCreateNestedOneWithoutConsumerTypeInput
  }

  export type ConsumerTypeUncheckedCreateInput = {
    consumerId?: string
    consumer?: string | null
  }

  export type ConsumerTypeUpdateInput = {
    consumer?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutConsumerTypeInput
  }

  export type ConsumerTypeUncheckedUpdateInput = {
    consumerId?: StringFieldUpdateOperationsInput | string
    consumer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ConsumerTypeCreateManyInput = {
    consumerId?: string
    consumer?: string | null
  }

  export type ConsumerTypeUpdateManyMutationInput = {
    consumer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ConsumerTypeUncheckedUpdateManyInput = {
    consumerId?: StringFieldUpdateOperationsInput | string
    consumer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CountryIformationCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    nationality?: string | null
    direction?: string | null
    zone: string
    departament?: string | null
    municipality?: string | null
    nearbyHeadquarters?: string | null
    user?: UserCreateNestedOneWithoutCountryInformationInput
  }

  export type CountryIformationUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    nationality?: string | null
    direction?: string | null
    zone: string
    departament?: string | null
    municipality?: string | null
    nearbyHeadquarters?: string | null
    countryId?: string | null
  }

  export type CountryIformationUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: NullableStringFieldUpdateOperationsInput | string | null
    zone?: StringFieldUpdateOperationsInput | string
    departament?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    nearbyHeadquarters?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutCountryInformationInput
  }

  export type CountryIformationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: NullableStringFieldUpdateOperationsInput | string | null
    zone?: StringFieldUpdateOperationsInput | string
    departament?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    nearbyHeadquarters?: NullableStringFieldUpdateOperationsInput | string | null
    countryId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CountryIformationCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    nationality?: string | null
    direction?: string | null
    zone: string
    departament?: string | null
    municipality?: string | null
    nearbyHeadquarters?: string | null
    countryId?: string | null
  }

  export type CountryIformationUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: NullableStringFieldUpdateOperationsInput | string | null
    zone?: StringFieldUpdateOperationsInput | string
    departament?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    nearbyHeadquarters?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CountryIformationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: NullableStringFieldUpdateOperationsInput | string | null
    zone?: StringFieldUpdateOperationsInput | string
    departament?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    nearbyHeadquarters?: NullableStringFieldUpdateOperationsInput | string | null
    countryId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PersonalDocumentationCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    identificationDocument?: string | null
    nit?: string | null
    user: UserCreateNestedOneWithoutPersonalDocumentsInput
  }

  export type PersonalDocumentationUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    identificationDocument?: string | null
    nit?: string | null
    personalDocId: string
  }

  export type PersonalDocumentationUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identificationDocument?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPersonalDocumentsInput
  }

  export type PersonalDocumentationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identificationDocument?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    personalDocId?: StringFieldUpdateOperationsInput | string
  }

  export type PersonalDocumentationCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    identificationDocument?: string | null
    nit?: string | null
    personalDocId: string
  }

  export type PersonalDocumentationUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identificationDocument?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PersonalDocumentationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identificationDocument?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    personalDocId?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type AnonymousRelationFilter = {
    is?: AnonymousWhereInput | null
    isNot?: AnonymousWhereInput | null
  }

  export type ComplaintCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    authorization?: SortOrder
    authorId?: SortOrder
    anonymousAuthorId?: SortOrder
  }

  export type ComplaintAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ComplaintMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    authorization?: SortOrder
    authorId?: SortOrder
    anonymousAuthorId?: SortOrder
  }

  export type ComplaintMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    authorization?: SortOrder
    authorId?: SortOrder
    anonymousAuthorId?: SortOrder
  }

  export type ComplaintSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type EnumProfileFilter = {
    equals?: Profile
    in?: Enumerable<Profile>
    notIn?: Enumerable<Profile>
    not?: NestedEnumProfileFilter | Profile
  }

  export type ComplaintListRelationFilter = {
    every?: ComplaintWhereInput
    some?: ComplaintWhereInput
    none?: ComplaintWhereInput
  }

  export type ComplaintOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AnonymousCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    profile?: SortOrder
  }

  export type AnonymousMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    profile?: SortOrder
  }

  export type AnonymousMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    profile?: SortOrder
  }

  export type EnumProfileWithAggregatesFilter = {
    equals?: Profile
    in?: Enumerable<Profile>
    notIn?: Enumerable<Profile>
    not?: NestedEnumProfileWithAggregatesFilter | Profile
    _count?: NestedIntFilter
    _min?: NestedEnumProfileFilter
    _max?: NestedEnumProfileFilter
  }

  export type CountryIformationRelationFilter = {
    is?: CountryIformationWhereInput | null
    isNot?: CountryIformationWhereInput | null
  }

  export type ConsumerTypeRelationFilter = {
    is?: ConsumerTypeWhereInput | null
    isNot?: ConsumerTypeWhereInput | null
  }

  export type GenderRelationFilter = {
    is?: GenderWhereInput | null
    isNot?: GenderWhereInput | null
  }

  export type PhoneRelationFilter = {
    is?: PhoneWhereInput | null
    isNot?: PhoneWhereInput | null
  }

  export type PersonalDocumentationRelationFilter = {
    is?: PersonalDocumentationWhereInput | null
    isNot?: PersonalDocumentationWhereInput | null
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    secondName?: SortOrder
    fisrtLastName?: SortOrder
    secondLastName?: SortOrder
    marriedName?: SortOrder
    email?: SortOrder
    profile?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    secondName?: SortOrder
    fisrtLastName?: SortOrder
    secondLastName?: SortOrder
    marriedName?: SortOrder
    email?: SortOrder
    profile?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    secondName?: SortOrder
    fisrtLastName?: SortOrder
    secondLastName?: SortOrder
    marriedName?: SortOrder
    email?: SortOrder
    profile?: SortOrder
  }

  export type PhoneCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    phoneNumber?: SortOrder
    phoneAddress?: SortOrder
    mobile?: SortOrder
    docimicilioPhone?: SortOrder
    phoneId?: SortOrder
  }

  export type PhoneAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PhoneMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    phoneNumber?: SortOrder
    phoneAddress?: SortOrder
    mobile?: SortOrder
    docimicilioPhone?: SortOrder
    phoneId?: SortOrder
  }

  export type PhoneMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    phoneNumber?: SortOrder
    phoneAddress?: SortOrder
    mobile?: SortOrder
    docimicilioPhone?: SortOrder
    phoneId?: SortOrder
  }

  export type PhoneSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GenderCountOrderByAggregateInput = {
    genderId?: SortOrder
    genderType?: SortOrder
  }

  export type GenderMaxOrderByAggregateInput = {
    genderId?: SortOrder
    genderType?: SortOrder
  }

  export type GenderMinOrderByAggregateInput = {
    genderId?: SortOrder
    genderType?: SortOrder
  }

  export type ConsumerTypeCountOrderByAggregateInput = {
    consumerId?: SortOrder
    consumer?: SortOrder
  }

  export type ConsumerTypeMaxOrderByAggregateInput = {
    consumerId?: SortOrder
    consumer?: SortOrder
  }

  export type ConsumerTypeMinOrderByAggregateInput = {
    consumerId?: SortOrder
    consumer?: SortOrder
  }

  export type CountryIformationCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nationality?: SortOrder
    direction?: SortOrder
    zone?: SortOrder
    departament?: SortOrder
    municipality?: SortOrder
    nearbyHeadquarters?: SortOrder
    countryId?: SortOrder
  }

  export type CountryIformationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CountryIformationMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nationality?: SortOrder
    direction?: SortOrder
    zone?: SortOrder
    departament?: SortOrder
    municipality?: SortOrder
    nearbyHeadquarters?: SortOrder
    countryId?: SortOrder
  }

  export type CountryIformationMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nationality?: SortOrder
    direction?: SortOrder
    zone?: SortOrder
    departament?: SortOrder
    municipality?: SortOrder
    nearbyHeadquarters?: SortOrder
    countryId?: SortOrder
  }

  export type CountryIformationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PersonalDocumentationCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    identificationDocument?: SortOrder
    nit?: SortOrder
    personalDocId?: SortOrder
  }

  export type PersonalDocumentationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PersonalDocumentationMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    identificationDocument?: SortOrder
    nit?: SortOrder
    personalDocId?: SortOrder
  }

  export type PersonalDocumentationMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    identificationDocument?: SortOrder
    nit?: SortOrder
    personalDocId?: SortOrder
  }

  export type PersonalDocumentationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserCreateNestedOneWithoutComplaintsInput = {
    create?: XOR<UserCreateWithoutComplaintsInput, UserUncheckedCreateWithoutComplaintsInput>
    connectOrCreate?: UserCreateOrConnectWithoutComplaintsInput
    connect?: UserWhereUniqueInput
  }

  export type AnonymousCreateNestedOneWithoutComplaintsInput = {
    create?: XOR<AnonymousCreateWithoutComplaintsInput, AnonymousUncheckedCreateWithoutComplaintsInput>
    connectOrCreate?: AnonymousCreateOrConnectWithoutComplaintsInput
    connect?: AnonymousWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneWithoutComplaintsInput = {
    create?: XOR<UserCreateWithoutComplaintsInput, UserUncheckedCreateWithoutComplaintsInput>
    connectOrCreate?: UserCreateOrConnectWithoutComplaintsInput
    upsert?: UserUpsertWithoutComplaintsInput
    connect?: UserWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<UserUpdateWithoutComplaintsInput, UserUncheckedUpdateWithoutComplaintsInput>
  }

  export type AnonymousUpdateOneWithoutComplaintsInput = {
    create?: XOR<AnonymousCreateWithoutComplaintsInput, AnonymousUncheckedCreateWithoutComplaintsInput>
    connectOrCreate?: AnonymousCreateOrConnectWithoutComplaintsInput
    upsert?: AnonymousUpsertWithoutComplaintsInput
    connect?: AnonymousWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<AnonymousUpdateWithoutComplaintsInput, AnonymousUncheckedUpdateWithoutComplaintsInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ComplaintCreateNestedManyWithoutAnonymousAuthorInput = {
    create?: XOR<Enumerable<ComplaintCreateWithoutAnonymousAuthorInput>, Enumerable<ComplaintUncheckedCreateWithoutAnonymousAuthorInput>>
    connectOrCreate?: Enumerable<ComplaintCreateOrConnectWithoutAnonymousAuthorInput>
    createMany?: ComplaintCreateManyAnonymousAuthorInputEnvelope
    connect?: Enumerable<ComplaintWhereUniqueInput>
  }

  export type ComplaintUncheckedCreateNestedManyWithoutAnonymousAuthorInput = {
    create?: XOR<Enumerable<ComplaintCreateWithoutAnonymousAuthorInput>, Enumerable<ComplaintUncheckedCreateWithoutAnonymousAuthorInput>>
    connectOrCreate?: Enumerable<ComplaintCreateOrConnectWithoutAnonymousAuthorInput>
    createMany?: ComplaintCreateManyAnonymousAuthorInputEnvelope
    connect?: Enumerable<ComplaintWhereUniqueInput>
  }

  export type EnumProfileFieldUpdateOperationsInput = {
    set?: Profile
  }

  export type ComplaintUpdateManyWithoutAnonymousAuthorInput = {
    create?: XOR<Enumerable<ComplaintCreateWithoutAnonymousAuthorInput>, Enumerable<ComplaintUncheckedCreateWithoutAnonymousAuthorInput>>
    connectOrCreate?: Enumerable<ComplaintCreateOrConnectWithoutAnonymousAuthorInput>
    upsert?: Enumerable<ComplaintUpsertWithWhereUniqueWithoutAnonymousAuthorInput>
    createMany?: ComplaintCreateManyAnonymousAuthorInputEnvelope
    connect?: Enumerable<ComplaintWhereUniqueInput>
    set?: Enumerable<ComplaintWhereUniqueInput>
    disconnect?: Enumerable<ComplaintWhereUniqueInput>
    delete?: Enumerable<ComplaintWhereUniqueInput>
    update?: Enumerable<ComplaintUpdateWithWhereUniqueWithoutAnonymousAuthorInput>
    updateMany?: Enumerable<ComplaintUpdateManyWithWhereWithoutAnonymousAuthorInput>
    deleteMany?: Enumerable<ComplaintScalarWhereInput>
  }

  export type ComplaintUncheckedUpdateManyWithoutAnonymousAuthorInput = {
    create?: XOR<Enumerable<ComplaintCreateWithoutAnonymousAuthorInput>, Enumerable<ComplaintUncheckedCreateWithoutAnonymousAuthorInput>>
    connectOrCreate?: Enumerable<ComplaintCreateOrConnectWithoutAnonymousAuthorInput>
    upsert?: Enumerable<ComplaintUpsertWithWhereUniqueWithoutAnonymousAuthorInput>
    createMany?: ComplaintCreateManyAnonymousAuthorInputEnvelope
    connect?: Enumerable<ComplaintWhereUniqueInput>
    set?: Enumerable<ComplaintWhereUniqueInput>
    disconnect?: Enumerable<ComplaintWhereUniqueInput>
    delete?: Enumerable<ComplaintWhereUniqueInput>
    update?: Enumerable<ComplaintUpdateWithWhereUniqueWithoutAnonymousAuthorInput>
    updateMany?: Enumerable<ComplaintUpdateManyWithWhereWithoutAnonymousAuthorInput>
    deleteMany?: Enumerable<ComplaintScalarWhereInput>
  }

  export type CountryIformationCreateNestedOneWithoutUserInput = {
    create?: XOR<CountryIformationCreateWithoutUserInput, CountryIformationUncheckedCreateWithoutUserInput>
    connectOrCreate?: CountryIformationCreateOrConnectWithoutUserInput
    connect?: CountryIformationWhereUniqueInput
  }

  export type ConsumerTypeCreateNestedOneWithoutUserInput = {
    create?: XOR<ConsumerTypeCreateWithoutUserInput, ConsumerTypeUncheckedCreateWithoutUserInput>
    connectOrCreate?: ConsumerTypeCreateOrConnectWithoutUserInput
    connect?: ConsumerTypeWhereUniqueInput
  }

  export type GenderCreateNestedOneWithoutUserInput = {
    create?: XOR<GenderCreateWithoutUserInput, GenderUncheckedCreateWithoutUserInput>
    connectOrCreate?: GenderCreateOrConnectWithoutUserInput
    connect?: GenderWhereUniqueInput
  }

  export type PhoneCreateNestedOneWithoutUserInput = {
    create?: XOR<PhoneCreateWithoutUserInput, PhoneUncheckedCreateWithoutUserInput>
    connectOrCreate?: PhoneCreateOrConnectWithoutUserInput
    connect?: PhoneWhereUniqueInput
  }

  export type PersonalDocumentationCreateNestedOneWithoutUserInput = {
    create?: XOR<PersonalDocumentationCreateWithoutUserInput, PersonalDocumentationUncheckedCreateWithoutUserInput>
    connectOrCreate?: PersonalDocumentationCreateOrConnectWithoutUserInput
    connect?: PersonalDocumentationWhereUniqueInput
  }

  export type ComplaintCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<ComplaintCreateWithoutAuthorInput>, Enumerable<ComplaintUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<ComplaintCreateOrConnectWithoutAuthorInput>
    createMany?: ComplaintCreateManyAuthorInputEnvelope
    connect?: Enumerable<ComplaintWhereUniqueInput>
  }

  export type CountryIformationUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<CountryIformationCreateWithoutUserInput, CountryIformationUncheckedCreateWithoutUserInput>
    connectOrCreate?: CountryIformationCreateOrConnectWithoutUserInput
    connect?: CountryIformationWhereUniqueInput
  }

  export type ConsumerTypeUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ConsumerTypeCreateWithoutUserInput, ConsumerTypeUncheckedCreateWithoutUserInput>
    connectOrCreate?: ConsumerTypeCreateOrConnectWithoutUserInput
    connect?: ConsumerTypeWhereUniqueInput
  }

  export type GenderUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<GenderCreateWithoutUserInput, GenderUncheckedCreateWithoutUserInput>
    connectOrCreate?: GenderCreateOrConnectWithoutUserInput
    connect?: GenderWhereUniqueInput
  }

  export type PhoneUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<PhoneCreateWithoutUserInput, PhoneUncheckedCreateWithoutUserInput>
    connectOrCreate?: PhoneCreateOrConnectWithoutUserInput
    connect?: PhoneWhereUniqueInput
  }

  export type PersonalDocumentationUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<PersonalDocumentationCreateWithoutUserInput, PersonalDocumentationUncheckedCreateWithoutUserInput>
    connectOrCreate?: PersonalDocumentationCreateOrConnectWithoutUserInput
    connect?: PersonalDocumentationWhereUniqueInput
  }

  export type ComplaintUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<ComplaintCreateWithoutAuthorInput>, Enumerable<ComplaintUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<ComplaintCreateOrConnectWithoutAuthorInput>
    createMany?: ComplaintCreateManyAuthorInputEnvelope
    connect?: Enumerable<ComplaintWhereUniqueInput>
  }

  export type CountryIformationUpdateOneWithoutUserInput = {
    create?: XOR<CountryIformationCreateWithoutUserInput, CountryIformationUncheckedCreateWithoutUserInput>
    connectOrCreate?: CountryIformationCreateOrConnectWithoutUserInput
    upsert?: CountryIformationUpsertWithoutUserInput
    connect?: CountryIformationWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<CountryIformationUpdateWithoutUserInput, CountryIformationUncheckedUpdateWithoutUserInput>
  }

  export type ConsumerTypeUpdateOneWithoutUserInput = {
    create?: XOR<ConsumerTypeCreateWithoutUserInput, ConsumerTypeUncheckedCreateWithoutUserInput>
    connectOrCreate?: ConsumerTypeCreateOrConnectWithoutUserInput
    upsert?: ConsumerTypeUpsertWithoutUserInput
    connect?: ConsumerTypeWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<ConsumerTypeUpdateWithoutUserInput, ConsumerTypeUncheckedUpdateWithoutUserInput>
  }

  export type GenderUpdateOneWithoutUserInput = {
    create?: XOR<GenderCreateWithoutUserInput, GenderUncheckedCreateWithoutUserInput>
    connectOrCreate?: GenderCreateOrConnectWithoutUserInput
    upsert?: GenderUpsertWithoutUserInput
    connect?: GenderWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<GenderUpdateWithoutUserInput, GenderUncheckedUpdateWithoutUserInput>
  }

  export type PhoneUpdateOneWithoutUserInput = {
    create?: XOR<PhoneCreateWithoutUserInput, PhoneUncheckedCreateWithoutUserInput>
    connectOrCreate?: PhoneCreateOrConnectWithoutUserInput
    upsert?: PhoneUpsertWithoutUserInput
    connect?: PhoneWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<PhoneUpdateWithoutUserInput, PhoneUncheckedUpdateWithoutUserInput>
  }

  export type PersonalDocumentationUpdateOneWithoutUserInput = {
    create?: XOR<PersonalDocumentationCreateWithoutUserInput, PersonalDocumentationUncheckedCreateWithoutUserInput>
    connectOrCreate?: PersonalDocumentationCreateOrConnectWithoutUserInput
    upsert?: PersonalDocumentationUpsertWithoutUserInput
    connect?: PersonalDocumentationWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<PersonalDocumentationUpdateWithoutUserInput, PersonalDocumentationUncheckedUpdateWithoutUserInput>
  }

  export type ComplaintUpdateManyWithoutAuthorInput = {
    create?: XOR<Enumerable<ComplaintCreateWithoutAuthorInput>, Enumerable<ComplaintUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<ComplaintCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<ComplaintUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: ComplaintCreateManyAuthorInputEnvelope
    connect?: Enumerable<ComplaintWhereUniqueInput>
    set?: Enumerable<ComplaintWhereUniqueInput>
    disconnect?: Enumerable<ComplaintWhereUniqueInput>
    delete?: Enumerable<ComplaintWhereUniqueInput>
    update?: Enumerable<ComplaintUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<ComplaintUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<ComplaintScalarWhereInput>
  }

  export type CountryIformationUncheckedUpdateOneWithoutUserInput = {
    create?: XOR<CountryIformationCreateWithoutUserInput, CountryIformationUncheckedCreateWithoutUserInput>
    connectOrCreate?: CountryIformationCreateOrConnectWithoutUserInput
    upsert?: CountryIformationUpsertWithoutUserInput
    connect?: CountryIformationWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<CountryIformationUpdateWithoutUserInput, CountryIformationUncheckedUpdateWithoutUserInput>
  }

  export type ConsumerTypeUncheckedUpdateOneWithoutUserInput = {
    create?: XOR<ConsumerTypeCreateWithoutUserInput, ConsumerTypeUncheckedCreateWithoutUserInput>
    connectOrCreate?: ConsumerTypeCreateOrConnectWithoutUserInput
    upsert?: ConsumerTypeUpsertWithoutUserInput
    connect?: ConsumerTypeWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<ConsumerTypeUpdateWithoutUserInput, ConsumerTypeUncheckedUpdateWithoutUserInput>
  }

  export type GenderUncheckedUpdateOneWithoutUserInput = {
    create?: XOR<GenderCreateWithoutUserInput, GenderUncheckedCreateWithoutUserInput>
    connectOrCreate?: GenderCreateOrConnectWithoutUserInput
    upsert?: GenderUpsertWithoutUserInput
    connect?: GenderWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<GenderUpdateWithoutUserInput, GenderUncheckedUpdateWithoutUserInput>
  }

  export type PhoneUncheckedUpdateOneWithoutUserInput = {
    create?: XOR<PhoneCreateWithoutUserInput, PhoneUncheckedCreateWithoutUserInput>
    connectOrCreate?: PhoneCreateOrConnectWithoutUserInput
    upsert?: PhoneUpsertWithoutUserInput
    connect?: PhoneWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<PhoneUpdateWithoutUserInput, PhoneUncheckedUpdateWithoutUserInput>
  }

  export type PersonalDocumentationUncheckedUpdateOneWithoutUserInput = {
    create?: XOR<PersonalDocumentationCreateWithoutUserInput, PersonalDocumentationUncheckedCreateWithoutUserInput>
    connectOrCreate?: PersonalDocumentationCreateOrConnectWithoutUserInput
    upsert?: PersonalDocumentationUpsertWithoutUserInput
    connect?: PersonalDocumentationWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<PersonalDocumentationUpdateWithoutUserInput, PersonalDocumentationUncheckedUpdateWithoutUserInput>
  }

  export type ComplaintUncheckedUpdateManyWithoutAuthorInput = {
    create?: XOR<Enumerable<ComplaintCreateWithoutAuthorInput>, Enumerable<ComplaintUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<ComplaintCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<ComplaintUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: ComplaintCreateManyAuthorInputEnvelope
    connect?: Enumerable<ComplaintWhereUniqueInput>
    set?: Enumerable<ComplaintWhereUniqueInput>
    disconnect?: Enumerable<ComplaintWhereUniqueInput>
    delete?: Enumerable<ComplaintWhereUniqueInput>
    update?: Enumerable<ComplaintUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<ComplaintUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<ComplaintScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutPhoneInput = {
    create?: XOR<UserCreateWithoutPhoneInput, UserUncheckedCreateWithoutPhoneInput>
    connectOrCreate?: UserCreateOrConnectWithoutPhoneInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPhoneInput = {
    create?: XOR<UserCreateWithoutPhoneInput, UserUncheckedCreateWithoutPhoneInput>
    connectOrCreate?: UserCreateOrConnectWithoutPhoneInput
    upsert?: UserUpsertWithoutPhoneInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPhoneInput, UserUncheckedUpdateWithoutPhoneInput>
  }

  export type UserCreateNestedOneWithoutGenderInput = {
    create?: XOR<UserCreateWithoutGenderInput, UserUncheckedCreateWithoutGenderInput>
    connectOrCreate?: UserCreateOrConnectWithoutGenderInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutGenderInput = {
    create?: XOR<UserCreateWithoutGenderInput, UserUncheckedCreateWithoutGenderInput>
    connectOrCreate?: UserCreateOrConnectWithoutGenderInput
    upsert?: UserUpsertWithoutGenderInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutGenderInput, UserUncheckedUpdateWithoutGenderInput>
  }

  export type UserCreateNestedOneWithoutConsumerTypeInput = {
    create?: XOR<UserCreateWithoutConsumerTypeInput, UserUncheckedCreateWithoutConsumerTypeInput>
    connectOrCreate?: UserCreateOrConnectWithoutConsumerTypeInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutConsumerTypeInput = {
    create?: XOR<UserCreateWithoutConsumerTypeInput, UserUncheckedCreateWithoutConsumerTypeInput>
    connectOrCreate?: UserCreateOrConnectWithoutConsumerTypeInput
    upsert?: UserUpsertWithoutConsumerTypeInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutConsumerTypeInput, UserUncheckedUpdateWithoutConsumerTypeInput>
  }

  export type UserCreateNestedOneWithoutCountryInformationInput = {
    create?: XOR<UserCreateWithoutCountryInformationInput, UserUncheckedCreateWithoutCountryInformationInput>
    connectOrCreate?: UserCreateOrConnectWithoutCountryInformationInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutCountryInformationInput = {
    create?: XOR<UserCreateWithoutCountryInformationInput, UserUncheckedCreateWithoutCountryInformationInput>
    connectOrCreate?: UserCreateOrConnectWithoutCountryInformationInput
    upsert?: UserUpsertWithoutCountryInformationInput
    connect?: UserWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<UserUpdateWithoutCountryInformationInput, UserUncheckedUpdateWithoutCountryInformationInput>
  }

  export type UserCreateNestedOneWithoutPersonalDocumentsInput = {
    create?: XOR<UserCreateWithoutPersonalDocumentsInput, UserUncheckedCreateWithoutPersonalDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPersonalDocumentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPersonalDocumentsInput = {
    create?: XOR<UserCreateWithoutPersonalDocumentsInput, UserUncheckedCreateWithoutPersonalDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPersonalDocumentsInput
    upsert?: UserUpsertWithoutPersonalDocumentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPersonalDocumentsInput, UserUncheckedUpdateWithoutPersonalDocumentsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedEnumProfileFilter = {
    equals?: Profile
    in?: Enumerable<Profile>
    notIn?: Enumerable<Profile>
    not?: NestedEnumProfileFilter | Profile
  }

  export type NestedEnumProfileWithAggregatesFilter = {
    equals?: Profile
    in?: Enumerable<Profile>
    notIn?: Enumerable<Profile>
    not?: NestedEnumProfileWithAggregatesFilter | Profile
    _count?: NestedIntFilter
    _min?: NestedEnumProfileFilter
    _max?: NestedEnumProfileFilter
  }

  export type UserCreateWithoutComplaintsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    secondName?: string | null
    fisrtLastName?: string | null
    secondLastName?: string | null
    marriedName: string
    email?: string | null
    profile?: Profile
    countryInformation?: CountryIformationCreateNestedOneWithoutUserInput
    consumerType?: ConsumerTypeCreateNestedOneWithoutUserInput
    gender?: GenderCreateNestedOneWithoutUserInput
    phone?: PhoneCreateNestedOneWithoutUserInput
    personalDocuments?: PersonalDocumentationCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutComplaintsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    secondName?: string | null
    fisrtLastName?: string | null
    secondLastName?: string | null
    marriedName: string
    email?: string | null
    profile?: Profile
    countryInformation?: CountryIformationUncheckedCreateNestedOneWithoutUserInput
    consumerType?: ConsumerTypeUncheckedCreateNestedOneWithoutUserInput
    gender?: GenderUncheckedCreateNestedOneWithoutUserInput
    phone?: PhoneUncheckedCreateNestedOneWithoutUserInput
    personalDocuments?: PersonalDocumentationUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutComplaintsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutComplaintsInput, UserUncheckedCreateWithoutComplaintsInput>
  }

  export type AnonymousCreateWithoutComplaintsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: Profile
  }

  export type AnonymousUncheckedCreateWithoutComplaintsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: Profile
  }

  export type AnonymousCreateOrConnectWithoutComplaintsInput = {
    where: AnonymousWhereUniqueInput
    create: XOR<AnonymousCreateWithoutComplaintsInput, AnonymousUncheckedCreateWithoutComplaintsInput>
  }

  export type UserUpsertWithoutComplaintsInput = {
    update: XOR<UserUpdateWithoutComplaintsInput, UserUncheckedUpdateWithoutComplaintsInput>
    create: XOR<UserCreateWithoutComplaintsInput, UserUncheckedCreateWithoutComplaintsInput>
  }

  export type UserUpdateWithoutComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    secondName?: NullableStringFieldUpdateOperationsInput | string | null
    fisrtLastName?: NullableStringFieldUpdateOperationsInput | string | null
    secondLastName?: NullableStringFieldUpdateOperationsInput | string | null
    marriedName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: EnumProfileFieldUpdateOperationsInput | Profile
    countryInformation?: CountryIformationUpdateOneWithoutUserInput
    consumerType?: ConsumerTypeUpdateOneWithoutUserInput
    gender?: GenderUpdateOneWithoutUserInput
    phone?: PhoneUpdateOneWithoutUserInput
    personalDocuments?: PersonalDocumentationUpdateOneWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    secondName?: NullableStringFieldUpdateOperationsInput | string | null
    fisrtLastName?: NullableStringFieldUpdateOperationsInput | string | null
    secondLastName?: NullableStringFieldUpdateOperationsInput | string | null
    marriedName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: EnumProfileFieldUpdateOperationsInput | Profile
    countryInformation?: CountryIformationUncheckedUpdateOneWithoutUserInput
    consumerType?: ConsumerTypeUncheckedUpdateOneWithoutUserInput
    gender?: GenderUncheckedUpdateOneWithoutUserInput
    phone?: PhoneUncheckedUpdateOneWithoutUserInput
    personalDocuments?: PersonalDocumentationUncheckedUpdateOneWithoutUserInput
  }

  export type AnonymousUpsertWithoutComplaintsInput = {
    update: XOR<AnonymousUpdateWithoutComplaintsInput, AnonymousUncheckedUpdateWithoutComplaintsInput>
    create: XOR<AnonymousCreateWithoutComplaintsInput, AnonymousUncheckedCreateWithoutComplaintsInput>
  }

  export type AnonymousUpdateWithoutComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: EnumProfileFieldUpdateOperationsInput | Profile
  }

  export type AnonymousUncheckedUpdateWithoutComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: EnumProfileFieldUpdateOperationsInput | Profile
  }

  export type ComplaintCreateWithoutAnonymousAuthorInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    description?: string | null
    authorization?: boolean
    author?: UserCreateNestedOneWithoutComplaintsInput
  }

  export type ComplaintUncheckedCreateWithoutAnonymousAuthorInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    description?: string | null
    authorization?: boolean
    authorId?: string | null
  }

  export type ComplaintCreateOrConnectWithoutAnonymousAuthorInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutAnonymousAuthorInput, ComplaintUncheckedCreateWithoutAnonymousAuthorInput>
  }

  export type ComplaintCreateManyAnonymousAuthorInputEnvelope = {
    data: Enumerable<ComplaintCreateManyAnonymousAuthorInput>
    skipDuplicates?: boolean
  }

  export type ComplaintUpsertWithWhereUniqueWithoutAnonymousAuthorInput = {
    where: ComplaintWhereUniqueInput
    update: XOR<ComplaintUpdateWithoutAnonymousAuthorInput, ComplaintUncheckedUpdateWithoutAnonymousAuthorInput>
    create: XOR<ComplaintCreateWithoutAnonymousAuthorInput, ComplaintUncheckedCreateWithoutAnonymousAuthorInput>
  }

  export type ComplaintUpdateWithWhereUniqueWithoutAnonymousAuthorInput = {
    where: ComplaintWhereUniqueInput
    data: XOR<ComplaintUpdateWithoutAnonymousAuthorInput, ComplaintUncheckedUpdateWithoutAnonymousAuthorInput>
  }

  export type ComplaintUpdateManyWithWhereWithoutAnonymousAuthorInput = {
    where: ComplaintScalarWhereInput
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyWithoutComplaintsInput>
  }

  export type ComplaintScalarWhereInput = {
    AND?: Enumerable<ComplaintScalarWhereInput>
    OR?: Enumerable<ComplaintScalarWhereInput>
    NOT?: Enumerable<ComplaintScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    title?: StringFilter | string
    description?: StringNullableFilter | string | null
    authorization?: BoolFilter | boolean
    authorId?: StringNullableFilter | string | null
    anonymousAuthorId?: StringNullableFilter | string | null
  }

  export type CountryIformationCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    nationality?: string | null
    direction?: string | null
    zone: string
    departament?: string | null
    municipality?: string | null
    nearbyHeadquarters?: string | null
  }

  export type CountryIformationUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    nationality?: string | null
    direction?: string | null
    zone: string
    departament?: string | null
    municipality?: string | null
    nearbyHeadquarters?: string | null
  }

  export type CountryIformationCreateOrConnectWithoutUserInput = {
    where: CountryIformationWhereUniqueInput
    create: XOR<CountryIformationCreateWithoutUserInput, CountryIformationUncheckedCreateWithoutUserInput>
  }

  export type ConsumerTypeCreateWithoutUserInput = {
    consumer?: string | null
  }

  export type ConsumerTypeUncheckedCreateWithoutUserInput = {
    consumer?: string | null
  }

  export type ConsumerTypeCreateOrConnectWithoutUserInput = {
    where: ConsumerTypeWhereUniqueInput
    create: XOR<ConsumerTypeCreateWithoutUserInput, ConsumerTypeUncheckedCreateWithoutUserInput>
  }

  export type GenderCreateWithoutUserInput = {
    genderType?: string | null
  }

  export type GenderUncheckedCreateWithoutUserInput = {
    genderType?: string | null
  }

  export type GenderCreateOrConnectWithoutUserInput = {
    where: GenderWhereUniqueInput
    create: XOR<GenderCreateWithoutUserInput, GenderUncheckedCreateWithoutUserInput>
  }

  export type PhoneCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    phoneNumber?: string | null
    phoneAddress?: string | null
    mobile?: string | null
    docimicilioPhone?: string | null
  }

  export type PhoneUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    phoneNumber?: string | null
    phoneAddress?: string | null
    mobile?: string | null
    docimicilioPhone?: string | null
  }

  export type PhoneCreateOrConnectWithoutUserInput = {
    where: PhoneWhereUniqueInput
    create: XOR<PhoneCreateWithoutUserInput, PhoneUncheckedCreateWithoutUserInput>
  }

  export type PersonalDocumentationCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    identificationDocument?: string | null
    nit?: string | null
  }

  export type PersonalDocumentationUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    identificationDocument?: string | null
    nit?: string | null
  }

  export type PersonalDocumentationCreateOrConnectWithoutUserInput = {
    where: PersonalDocumentationWhereUniqueInput
    create: XOR<PersonalDocumentationCreateWithoutUserInput, PersonalDocumentationUncheckedCreateWithoutUserInput>
  }

  export type ComplaintCreateWithoutAuthorInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    description?: string | null
    authorization?: boolean
    anonymousAuthor?: AnonymousCreateNestedOneWithoutComplaintsInput
  }

  export type ComplaintUncheckedCreateWithoutAuthorInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    description?: string | null
    authorization?: boolean
    anonymousAuthorId?: string | null
  }

  export type ComplaintCreateOrConnectWithoutAuthorInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutAuthorInput, ComplaintUncheckedCreateWithoutAuthorInput>
  }

  export type ComplaintCreateManyAuthorInputEnvelope = {
    data: Enumerable<ComplaintCreateManyAuthorInput>
    skipDuplicates?: boolean
  }

  export type CountryIformationUpsertWithoutUserInput = {
    update: XOR<CountryIformationUpdateWithoutUserInput, CountryIformationUncheckedUpdateWithoutUserInput>
    create: XOR<CountryIformationCreateWithoutUserInput, CountryIformationUncheckedCreateWithoutUserInput>
  }

  export type CountryIformationUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: NullableStringFieldUpdateOperationsInput | string | null
    zone?: StringFieldUpdateOperationsInput | string
    departament?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    nearbyHeadquarters?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CountryIformationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: NullableStringFieldUpdateOperationsInput | string | null
    zone?: StringFieldUpdateOperationsInput | string
    departament?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    nearbyHeadquarters?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ConsumerTypeUpsertWithoutUserInput = {
    update: XOR<ConsumerTypeUpdateWithoutUserInput, ConsumerTypeUncheckedUpdateWithoutUserInput>
    create: XOR<ConsumerTypeCreateWithoutUserInput, ConsumerTypeUncheckedCreateWithoutUserInput>
  }

  export type ConsumerTypeUpdateWithoutUserInput = {
    consumer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ConsumerTypeUncheckedUpdateWithoutUserInput = {
    consumer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GenderUpsertWithoutUserInput = {
    update: XOR<GenderUpdateWithoutUserInput, GenderUncheckedUpdateWithoutUserInput>
    create: XOR<GenderCreateWithoutUserInput, GenderUncheckedCreateWithoutUserInput>
  }

  export type GenderUpdateWithoutUserInput = {
    genderType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GenderUncheckedUpdateWithoutUserInput = {
    genderType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PhoneUpsertWithoutUserInput = {
    update: XOR<PhoneUpdateWithoutUserInput, PhoneUncheckedUpdateWithoutUserInput>
    create: XOR<PhoneCreateWithoutUserInput, PhoneUncheckedCreateWithoutUserInput>
  }

  export type PhoneUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneAddress?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    docimicilioPhone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PhoneUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneAddress?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    docimicilioPhone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PersonalDocumentationUpsertWithoutUserInput = {
    update: XOR<PersonalDocumentationUpdateWithoutUserInput, PersonalDocumentationUncheckedUpdateWithoutUserInput>
    create: XOR<PersonalDocumentationCreateWithoutUserInput, PersonalDocumentationUncheckedCreateWithoutUserInput>
  }

  export type PersonalDocumentationUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identificationDocument?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PersonalDocumentationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    identificationDocument?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComplaintUpsertWithWhereUniqueWithoutAuthorInput = {
    where: ComplaintWhereUniqueInput
    update: XOR<ComplaintUpdateWithoutAuthorInput, ComplaintUncheckedUpdateWithoutAuthorInput>
    create: XOR<ComplaintCreateWithoutAuthorInput, ComplaintUncheckedCreateWithoutAuthorInput>
  }

  export type ComplaintUpdateWithWhereUniqueWithoutAuthorInput = {
    where: ComplaintWhereUniqueInput
    data: XOR<ComplaintUpdateWithoutAuthorInput, ComplaintUncheckedUpdateWithoutAuthorInput>
  }

  export type ComplaintUpdateManyWithWhereWithoutAuthorInput = {
    where: ComplaintScalarWhereInput
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyWithoutComplaintsInput>
  }

  export type UserCreateWithoutPhoneInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    secondName?: string | null
    fisrtLastName?: string | null
    secondLastName?: string | null
    marriedName: string
    email?: string | null
    profile?: Profile
    countryInformation?: CountryIformationCreateNestedOneWithoutUserInput
    consumerType?: ConsumerTypeCreateNestedOneWithoutUserInput
    gender?: GenderCreateNestedOneWithoutUserInput
    personalDocuments?: PersonalDocumentationCreateNestedOneWithoutUserInput
    complaints?: ComplaintCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutPhoneInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    secondName?: string | null
    fisrtLastName?: string | null
    secondLastName?: string | null
    marriedName: string
    email?: string | null
    profile?: Profile
    countryInformation?: CountryIformationUncheckedCreateNestedOneWithoutUserInput
    consumerType?: ConsumerTypeUncheckedCreateNestedOneWithoutUserInput
    gender?: GenderUncheckedCreateNestedOneWithoutUserInput
    personalDocuments?: PersonalDocumentationUncheckedCreateNestedOneWithoutUserInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutPhoneInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPhoneInput, UserUncheckedCreateWithoutPhoneInput>
  }

  export type UserUpsertWithoutPhoneInput = {
    update: XOR<UserUpdateWithoutPhoneInput, UserUncheckedUpdateWithoutPhoneInput>
    create: XOR<UserCreateWithoutPhoneInput, UserUncheckedCreateWithoutPhoneInput>
  }

  export type UserUpdateWithoutPhoneInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    secondName?: NullableStringFieldUpdateOperationsInput | string | null
    fisrtLastName?: NullableStringFieldUpdateOperationsInput | string | null
    secondLastName?: NullableStringFieldUpdateOperationsInput | string | null
    marriedName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: EnumProfileFieldUpdateOperationsInput | Profile
    countryInformation?: CountryIformationUpdateOneWithoutUserInput
    consumerType?: ConsumerTypeUpdateOneWithoutUserInput
    gender?: GenderUpdateOneWithoutUserInput
    personalDocuments?: PersonalDocumentationUpdateOneWithoutUserInput
    complaints?: ComplaintUpdateManyWithoutAuthorInput
  }

  export type UserUncheckedUpdateWithoutPhoneInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    secondName?: NullableStringFieldUpdateOperationsInput | string | null
    fisrtLastName?: NullableStringFieldUpdateOperationsInput | string | null
    secondLastName?: NullableStringFieldUpdateOperationsInput | string | null
    marriedName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: EnumProfileFieldUpdateOperationsInput | Profile
    countryInformation?: CountryIformationUncheckedUpdateOneWithoutUserInput
    consumerType?: ConsumerTypeUncheckedUpdateOneWithoutUserInput
    gender?: GenderUncheckedUpdateOneWithoutUserInput
    personalDocuments?: PersonalDocumentationUncheckedUpdateOneWithoutUserInput
    complaints?: ComplaintUncheckedUpdateManyWithoutAuthorInput
  }

  export type UserCreateWithoutGenderInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    secondName?: string | null
    fisrtLastName?: string | null
    secondLastName?: string | null
    marriedName: string
    email?: string | null
    profile?: Profile
    countryInformation?: CountryIformationCreateNestedOneWithoutUserInput
    consumerType?: ConsumerTypeCreateNestedOneWithoutUserInput
    phone?: PhoneCreateNestedOneWithoutUserInput
    personalDocuments?: PersonalDocumentationCreateNestedOneWithoutUserInput
    complaints?: ComplaintCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutGenderInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    secondName?: string | null
    fisrtLastName?: string | null
    secondLastName?: string | null
    marriedName: string
    email?: string | null
    profile?: Profile
    countryInformation?: CountryIformationUncheckedCreateNestedOneWithoutUserInput
    consumerType?: ConsumerTypeUncheckedCreateNestedOneWithoutUserInput
    phone?: PhoneUncheckedCreateNestedOneWithoutUserInput
    personalDocuments?: PersonalDocumentationUncheckedCreateNestedOneWithoutUserInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutGenderInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGenderInput, UserUncheckedCreateWithoutGenderInput>
  }

  export type UserUpsertWithoutGenderInput = {
    update: XOR<UserUpdateWithoutGenderInput, UserUncheckedUpdateWithoutGenderInput>
    create: XOR<UserCreateWithoutGenderInput, UserUncheckedCreateWithoutGenderInput>
  }

  export type UserUpdateWithoutGenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    secondName?: NullableStringFieldUpdateOperationsInput | string | null
    fisrtLastName?: NullableStringFieldUpdateOperationsInput | string | null
    secondLastName?: NullableStringFieldUpdateOperationsInput | string | null
    marriedName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: EnumProfileFieldUpdateOperationsInput | Profile
    countryInformation?: CountryIformationUpdateOneWithoutUserInput
    consumerType?: ConsumerTypeUpdateOneWithoutUserInput
    phone?: PhoneUpdateOneWithoutUserInput
    personalDocuments?: PersonalDocumentationUpdateOneWithoutUserInput
    complaints?: ComplaintUpdateManyWithoutAuthorInput
  }

  export type UserUncheckedUpdateWithoutGenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    secondName?: NullableStringFieldUpdateOperationsInput | string | null
    fisrtLastName?: NullableStringFieldUpdateOperationsInput | string | null
    secondLastName?: NullableStringFieldUpdateOperationsInput | string | null
    marriedName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: EnumProfileFieldUpdateOperationsInput | Profile
    countryInformation?: CountryIformationUncheckedUpdateOneWithoutUserInput
    consumerType?: ConsumerTypeUncheckedUpdateOneWithoutUserInput
    phone?: PhoneUncheckedUpdateOneWithoutUserInput
    personalDocuments?: PersonalDocumentationUncheckedUpdateOneWithoutUserInput
    complaints?: ComplaintUncheckedUpdateManyWithoutAuthorInput
  }

  export type UserCreateWithoutConsumerTypeInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    secondName?: string | null
    fisrtLastName?: string | null
    secondLastName?: string | null
    marriedName: string
    email?: string | null
    profile?: Profile
    countryInformation?: CountryIformationCreateNestedOneWithoutUserInput
    gender?: GenderCreateNestedOneWithoutUserInput
    phone?: PhoneCreateNestedOneWithoutUserInput
    personalDocuments?: PersonalDocumentationCreateNestedOneWithoutUserInput
    complaints?: ComplaintCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutConsumerTypeInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    secondName?: string | null
    fisrtLastName?: string | null
    secondLastName?: string | null
    marriedName: string
    email?: string | null
    profile?: Profile
    countryInformation?: CountryIformationUncheckedCreateNestedOneWithoutUserInput
    gender?: GenderUncheckedCreateNestedOneWithoutUserInput
    phone?: PhoneUncheckedCreateNestedOneWithoutUserInput
    personalDocuments?: PersonalDocumentationUncheckedCreateNestedOneWithoutUserInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutConsumerTypeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutConsumerTypeInput, UserUncheckedCreateWithoutConsumerTypeInput>
  }

  export type UserUpsertWithoutConsumerTypeInput = {
    update: XOR<UserUpdateWithoutConsumerTypeInput, UserUncheckedUpdateWithoutConsumerTypeInput>
    create: XOR<UserCreateWithoutConsumerTypeInput, UserUncheckedCreateWithoutConsumerTypeInput>
  }

  export type UserUpdateWithoutConsumerTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    secondName?: NullableStringFieldUpdateOperationsInput | string | null
    fisrtLastName?: NullableStringFieldUpdateOperationsInput | string | null
    secondLastName?: NullableStringFieldUpdateOperationsInput | string | null
    marriedName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: EnumProfileFieldUpdateOperationsInput | Profile
    countryInformation?: CountryIformationUpdateOneWithoutUserInput
    gender?: GenderUpdateOneWithoutUserInput
    phone?: PhoneUpdateOneWithoutUserInput
    personalDocuments?: PersonalDocumentationUpdateOneWithoutUserInput
    complaints?: ComplaintUpdateManyWithoutAuthorInput
  }

  export type UserUncheckedUpdateWithoutConsumerTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    secondName?: NullableStringFieldUpdateOperationsInput | string | null
    fisrtLastName?: NullableStringFieldUpdateOperationsInput | string | null
    secondLastName?: NullableStringFieldUpdateOperationsInput | string | null
    marriedName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: EnumProfileFieldUpdateOperationsInput | Profile
    countryInformation?: CountryIformationUncheckedUpdateOneWithoutUserInput
    gender?: GenderUncheckedUpdateOneWithoutUserInput
    phone?: PhoneUncheckedUpdateOneWithoutUserInput
    personalDocuments?: PersonalDocumentationUncheckedUpdateOneWithoutUserInput
    complaints?: ComplaintUncheckedUpdateManyWithoutAuthorInput
  }

  export type UserCreateWithoutCountryInformationInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    secondName?: string | null
    fisrtLastName?: string | null
    secondLastName?: string | null
    marriedName: string
    email?: string | null
    profile?: Profile
    consumerType?: ConsumerTypeCreateNestedOneWithoutUserInput
    gender?: GenderCreateNestedOneWithoutUserInput
    phone?: PhoneCreateNestedOneWithoutUserInput
    personalDocuments?: PersonalDocumentationCreateNestedOneWithoutUserInput
    complaints?: ComplaintCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutCountryInformationInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    secondName?: string | null
    fisrtLastName?: string | null
    secondLastName?: string | null
    marriedName: string
    email?: string | null
    profile?: Profile
    consumerType?: ConsumerTypeUncheckedCreateNestedOneWithoutUserInput
    gender?: GenderUncheckedCreateNestedOneWithoutUserInput
    phone?: PhoneUncheckedCreateNestedOneWithoutUserInput
    personalDocuments?: PersonalDocumentationUncheckedCreateNestedOneWithoutUserInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutCountryInformationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCountryInformationInput, UserUncheckedCreateWithoutCountryInformationInput>
  }

  export type UserUpsertWithoutCountryInformationInput = {
    update: XOR<UserUpdateWithoutCountryInformationInput, UserUncheckedUpdateWithoutCountryInformationInput>
    create: XOR<UserCreateWithoutCountryInformationInput, UserUncheckedCreateWithoutCountryInformationInput>
  }

  export type UserUpdateWithoutCountryInformationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    secondName?: NullableStringFieldUpdateOperationsInput | string | null
    fisrtLastName?: NullableStringFieldUpdateOperationsInput | string | null
    secondLastName?: NullableStringFieldUpdateOperationsInput | string | null
    marriedName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: EnumProfileFieldUpdateOperationsInput | Profile
    consumerType?: ConsumerTypeUpdateOneWithoutUserInput
    gender?: GenderUpdateOneWithoutUserInput
    phone?: PhoneUpdateOneWithoutUserInput
    personalDocuments?: PersonalDocumentationUpdateOneWithoutUserInput
    complaints?: ComplaintUpdateManyWithoutAuthorInput
  }

  export type UserUncheckedUpdateWithoutCountryInformationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    secondName?: NullableStringFieldUpdateOperationsInput | string | null
    fisrtLastName?: NullableStringFieldUpdateOperationsInput | string | null
    secondLastName?: NullableStringFieldUpdateOperationsInput | string | null
    marriedName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: EnumProfileFieldUpdateOperationsInput | Profile
    consumerType?: ConsumerTypeUncheckedUpdateOneWithoutUserInput
    gender?: GenderUncheckedUpdateOneWithoutUserInput
    phone?: PhoneUncheckedUpdateOneWithoutUserInput
    personalDocuments?: PersonalDocumentationUncheckedUpdateOneWithoutUserInput
    complaints?: ComplaintUncheckedUpdateManyWithoutAuthorInput
  }

  export type UserCreateWithoutPersonalDocumentsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    secondName?: string | null
    fisrtLastName?: string | null
    secondLastName?: string | null
    marriedName: string
    email?: string | null
    profile?: Profile
    countryInformation?: CountryIformationCreateNestedOneWithoutUserInput
    consumerType?: ConsumerTypeCreateNestedOneWithoutUserInput
    gender?: GenderCreateNestedOneWithoutUserInput
    phone?: PhoneCreateNestedOneWithoutUserInput
    complaints?: ComplaintCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutPersonalDocumentsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    secondName?: string | null
    fisrtLastName?: string | null
    secondLastName?: string | null
    marriedName: string
    email?: string | null
    profile?: Profile
    countryInformation?: CountryIformationUncheckedCreateNestedOneWithoutUserInput
    consumerType?: ConsumerTypeUncheckedCreateNestedOneWithoutUserInput
    gender?: GenderUncheckedCreateNestedOneWithoutUserInput
    phone?: PhoneUncheckedCreateNestedOneWithoutUserInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutPersonalDocumentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPersonalDocumentsInput, UserUncheckedCreateWithoutPersonalDocumentsInput>
  }

  export type UserUpsertWithoutPersonalDocumentsInput = {
    update: XOR<UserUpdateWithoutPersonalDocumentsInput, UserUncheckedUpdateWithoutPersonalDocumentsInput>
    create: XOR<UserCreateWithoutPersonalDocumentsInput, UserUncheckedCreateWithoutPersonalDocumentsInput>
  }

  export type UserUpdateWithoutPersonalDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    secondName?: NullableStringFieldUpdateOperationsInput | string | null
    fisrtLastName?: NullableStringFieldUpdateOperationsInput | string | null
    secondLastName?: NullableStringFieldUpdateOperationsInput | string | null
    marriedName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: EnumProfileFieldUpdateOperationsInput | Profile
    countryInformation?: CountryIformationUpdateOneWithoutUserInput
    consumerType?: ConsumerTypeUpdateOneWithoutUserInput
    gender?: GenderUpdateOneWithoutUserInput
    phone?: PhoneUpdateOneWithoutUserInput
    complaints?: ComplaintUpdateManyWithoutAuthorInput
  }

  export type UserUncheckedUpdateWithoutPersonalDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    secondName?: NullableStringFieldUpdateOperationsInput | string | null
    fisrtLastName?: NullableStringFieldUpdateOperationsInput | string | null
    secondLastName?: NullableStringFieldUpdateOperationsInput | string | null
    marriedName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: EnumProfileFieldUpdateOperationsInput | Profile
    countryInformation?: CountryIformationUncheckedUpdateOneWithoutUserInput
    consumerType?: ConsumerTypeUncheckedUpdateOneWithoutUserInput
    gender?: GenderUncheckedUpdateOneWithoutUserInput
    phone?: PhoneUncheckedUpdateOneWithoutUserInput
    complaints?: ComplaintUncheckedUpdateManyWithoutAuthorInput
  }

  export type ComplaintCreateManyAnonymousAuthorInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    description?: string | null
    authorization?: boolean
    authorId?: string | null
  }

  export type ComplaintUpdateWithoutAnonymousAuthorInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    authorization?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneWithoutComplaintsInput
  }

  export type ComplaintUncheckedUpdateWithoutAnonymousAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    authorization?: BoolFieldUpdateOperationsInput | boolean
    authorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComplaintUncheckedUpdateManyWithoutComplaintsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    authorization?: BoolFieldUpdateOperationsInput | boolean
    authorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComplaintCreateManyAuthorInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    description?: string | null
    authorization?: boolean
    anonymousAuthorId?: string | null
  }

  export type ComplaintUpdateWithoutAuthorInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    authorization?: BoolFieldUpdateOperationsInput | boolean
    anonymousAuthor?: AnonymousUpdateOneWithoutComplaintsInput
  }

  export type ComplaintUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    authorization?: BoolFieldUpdateOperationsInput | boolean
    anonymousAuthorId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}